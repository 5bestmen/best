/* soapH.h
   Generated by gSOAP 2.8.16 from getData.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data),0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns2__ErrorType_level
#define SOAP_TYPE__ns2__ErrorType_level (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns2__ErrorType_level(struct soap*, enum _ns2__ErrorType_level *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ErrorType_level(struct soap*, const char*, int, const enum _ns2__ErrorType_level *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns2__ErrorType_level2s(struct soap*, enum _ns2__ErrorType_level);
SOAP_FMAC3 enum _ns2__ErrorType_level * SOAP_FMAC4 soap_in__ns2__ErrorType_level(struct soap*, const char*, enum _ns2__ErrorType_level *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns2__ErrorType_level(struct soap*, const char*, enum _ns2__ErrorType_level *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns2__ErrorType_level(struct soap*, const enum _ns2__ErrorType_level *, const char*, const char*);

#ifndef soap_write__ns2__ErrorType_level
#define soap_write__ns2__ErrorType_level(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__ns2__ErrorType_level(soap, data),0) || soap_put__ns2__ErrorType_level(soap, data, "ns2:ErrorType-level", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns2__ErrorType_level * SOAP_FMAC4 soap_get__ns2__ErrorType_level(struct soap*, enum _ns2__ErrorType_level *, const char*, const char*);

#ifndef soap_read__ns2__ErrorType_level
#define soap_read__ns2__ErrorType_level(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ErrorType_level(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns2__HeaderType_Verb
#define SOAP_TYPE__ns2__HeaderType_Verb (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns2__HeaderType_Verb(struct soap*, enum _ns2__HeaderType_Verb *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__HeaderType_Verb(struct soap*, const char*, int, const enum _ns2__HeaderType_Verb *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns2__HeaderType_Verb2s(struct soap*, enum _ns2__HeaderType_Verb);
SOAP_FMAC3 enum _ns2__HeaderType_Verb * SOAP_FMAC4 soap_in__ns2__HeaderType_Verb(struct soap*, const char*, enum _ns2__HeaderType_Verb *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns2__HeaderType_Verb(struct soap*, const char*, enum _ns2__HeaderType_Verb *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns2__HeaderType_Verb(struct soap*, const enum _ns2__HeaderType_Verb *, const char*, const char*);

#ifndef soap_write__ns2__HeaderType_Verb
#define soap_write__ns2__HeaderType_Verb(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__ns2__HeaderType_Verb(soap, data),0) || soap_put__ns2__HeaderType_Verb(soap, data, "ns2:HeaderType-Verb", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns2__HeaderType_Verb * SOAP_FMAC4 soap_get__ns2__HeaderType_Verb(struct soap*, enum _ns2__HeaderType_Verb *, const char*, const char*);

#ifndef soap_read__ns2__HeaderType_Verb
#define soap_read__ns2__HeaderType_Verb(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__HeaderType_Verb(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns2__ReplyType_Result
#define SOAP_TYPE__ns2__ReplyType_Result (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns2__ReplyType_Result(struct soap*, enum _ns2__ReplyType_Result *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ReplyType_Result(struct soap*, const char*, int, const enum _ns2__ReplyType_Result *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns2__ReplyType_Result2s(struct soap*, enum _ns2__ReplyType_Result);
SOAP_FMAC3 enum _ns2__ReplyType_Result * SOAP_FMAC4 soap_in__ns2__ReplyType_Result(struct soap*, const char*, enum _ns2__ReplyType_Result *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns2__ReplyType_Result(struct soap*, const char*, enum _ns2__ReplyType_Result *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns2__ReplyType_Result(struct soap*, const enum _ns2__ReplyType_Result *, const char*, const char*);

#ifndef soap_write__ns2__ReplyType_Result
#define soap_write__ns2__ReplyType_Result(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__ns2__ReplyType_Result(soap, data),0) || soap_put__ns2__ReplyType_Result(soap, data, "ns2:ReplyType-Result", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns2__ReplyType_Result * SOAP_FMAC4 soap_get__ns2__ReplyType_Result(struct soap*, enum _ns2__ReplyType_Result *, const char*, const char*);

#ifndef soap_read__ns2__ReplyType_Result
#define soap_read__ns2__ReplyType_Result(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ReplyType_Result(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__IDKindType
#define SOAP_TYPE_ns2__IDKindType (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__IDKindType(struct soap*, enum ns2__IDKindType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IDKindType(struct soap*, const char*, int, const enum ns2__IDKindType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__IDKindType2s(struct soap*, enum ns2__IDKindType);
SOAP_FMAC3 enum ns2__IDKindType * SOAP_FMAC4 soap_in_ns2__IDKindType(struct soap*, const char*, enum ns2__IDKindType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__IDKindType(struct soap*, const char*, enum ns2__IDKindType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IDKindType(struct soap*, const enum ns2__IDKindType *, const char*, const char*);

#ifndef soap_write_ns2__IDKindType
#define soap_write_ns2__IDKindType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IDKindType(soap, data),0) || soap_put_ns2__IDKindType(soap, data, "ns2:IDKindType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IDKindType * SOAP_FMAC4 soap_get_ns2__IDKindType(struct soap*, enum ns2__IDKindType *, const char*, const char*);

#ifndef soap_read_ns2__IDKindType
#define soap_read_ns2__IDKindType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IDKindType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns2__ErrorType_relatedID
#define SOAP_TYPE__ns2__ErrorType_relatedID (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ErrorType_relatedID(struct soap*, const char*, int, const _ns2__ErrorType_relatedID *, const char*);
SOAP_FMAC3 _ns2__ErrorType_relatedID * SOAP_FMAC4 soap_in__ns2__ErrorType_relatedID(struct soap*, const char*, _ns2__ErrorType_relatedID *, const char*);

#ifndef soap_write__ns2__ErrorType_relatedID
#define soap_write__ns2__ErrorType_relatedID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:ErrorType-relatedID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ErrorType_relatedID * SOAP_FMAC4 soap_get__ns2__ErrorType_relatedID(struct soap*, _ns2__ErrorType_relatedID *, const char*, const char*);

#ifndef soap_read__ns2__ErrorType_relatedID
#define soap_read__ns2__ErrorType_relatedID(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ErrorType_relatedID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ErrorType_relatedID * SOAP_FMAC2 soap_instantiate__ns2__ErrorType_relatedID(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ErrorType_relatedID * soap_new__ns2__ErrorType_relatedID(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ErrorType_relatedID(soap, n, NULL, NULL, NULL); }

inline _ns2__ErrorType_relatedID * soap_new_req__ns2__ErrorType_relatedID(struct soap *soap, std::string& __item) { _ns2__ErrorType_relatedID *_p = soap_instantiate__ns2__ErrorType_relatedID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ErrorType_relatedID::__item = __item; } return _p; }

inline _ns2__ErrorType_relatedID * soap_new_set__ns2__ErrorType_relatedID(struct soap *soap, std::string& __item, std::string *idType, std::string *idAuthority, enum ns2__IDKindType *kind, std::string *objectType) { _ns2__ErrorType_relatedID *_p = soap_instantiate__ns2__ErrorType_relatedID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ErrorType_relatedID::__item = __item; _p->_ns2__ErrorType_relatedID::idType = idType; _p->_ns2__ErrorType_relatedID::idAuthority = idAuthority; _p->_ns2__ErrorType_relatedID::kind = kind; _p->_ns2__ErrorType_relatedID::objectType = objectType; } return _p; }

inline void soap_delete__ns2__ErrorType_relatedID(struct soap *soap, _ns2__ErrorType_relatedID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ErrorType_relatedID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ErrorType_ID
#define SOAP_TYPE__ns2__ErrorType_ID (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ErrorType_ID(struct soap*, const char*, int, const _ns2__ErrorType_ID *, const char*);
SOAP_FMAC3 _ns2__ErrorType_ID * SOAP_FMAC4 soap_in__ns2__ErrorType_ID(struct soap*, const char*, _ns2__ErrorType_ID *, const char*);

#ifndef soap_write__ns2__ErrorType_ID
#define soap_write__ns2__ErrorType_ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:ErrorType-ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ErrorType_ID * SOAP_FMAC4 soap_get__ns2__ErrorType_ID(struct soap*, _ns2__ErrorType_ID *, const char*, const char*);

#ifndef soap_read__ns2__ErrorType_ID
#define soap_read__ns2__ErrorType_ID(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ErrorType_ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ErrorType_ID * SOAP_FMAC2 soap_instantiate__ns2__ErrorType_ID(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ErrorType_ID * soap_new__ns2__ErrorType_ID(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ErrorType_ID(soap, n, NULL, NULL, NULL); }

inline _ns2__ErrorType_ID * soap_new_req__ns2__ErrorType_ID(struct soap *soap, std::string& __item) { _ns2__ErrorType_ID *_p = soap_instantiate__ns2__ErrorType_ID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ErrorType_ID::__item = __item; } return _p; }

inline _ns2__ErrorType_ID * soap_new_set__ns2__ErrorType_ID(struct soap *soap, std::string& __item, std::string *idType, std::string *idAuthority, enum ns2__IDKindType *kind, std::string *objectType) { _ns2__ErrorType_ID *_p = soap_instantiate__ns2__ErrorType_ID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ErrorType_ID::__item = __item; _p->_ns2__ErrorType_ID::idType = idType; _p->_ns2__ErrorType_ID::idAuthority = idAuthority; _p->_ns2__ErrorType_ID::kind = kind; _p->_ns2__ErrorType_ID::objectType = objectType; } return _p; }

inline void soap_delete__ns2__ErrorType_ID(struct soap *soap, _ns2__ErrorType_ID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ErrorType_ID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__PayloadType_ID
#define SOAP_TYPE__ns2__PayloadType_ID (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__PayloadType_ID(struct soap*, const char*, int, const _ns2__PayloadType_ID *, const char*);
SOAP_FMAC3 _ns2__PayloadType_ID * SOAP_FMAC4 soap_in__ns2__PayloadType_ID(struct soap*, const char*, _ns2__PayloadType_ID *, const char*);

#ifndef soap_write__ns2__PayloadType_ID
#define soap_write__ns2__PayloadType_ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:PayloadType-ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__PayloadType_ID * SOAP_FMAC4 soap_get__ns2__PayloadType_ID(struct soap*, _ns2__PayloadType_ID *, const char*, const char*);

#ifndef soap_read__ns2__PayloadType_ID
#define soap_read__ns2__PayloadType_ID(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__PayloadType_ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__PayloadType_ID * SOAP_FMAC2 soap_instantiate__ns2__PayloadType_ID(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__PayloadType_ID * soap_new__ns2__PayloadType_ID(struct soap *soap, int n = -1) { return soap_instantiate__ns2__PayloadType_ID(soap, n, NULL, NULL, NULL); }

inline _ns2__PayloadType_ID * soap_new_req__ns2__PayloadType_ID(struct soap *soap, std::string& __item) { _ns2__PayloadType_ID *_p = soap_instantiate__ns2__PayloadType_ID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__PayloadType_ID::__item = __item; } return _p; }

inline _ns2__PayloadType_ID * soap_new_set__ns2__PayloadType_ID(struct soap *soap, std::string& __item, std::string *idType, std::string *idAuthority, enum ns2__IDKindType *kind, std::string *objectType) { _ns2__PayloadType_ID *_p = soap_instantiate__ns2__PayloadType_ID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__PayloadType_ID::__item = __item; _p->_ns2__PayloadType_ID::idType = idType; _p->_ns2__PayloadType_ID::idAuthority = idAuthority; _p->_ns2__PayloadType_ID::kind = kind; _p->_ns2__PayloadType_ID::objectType = objectType; } return _p; }

inline void soap_delete__ns2__PayloadType_ID(struct soap *soap, _ns2__PayloadType_ID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__PayloadType_ID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ReplyType_ID
#define SOAP_TYPE__ns2__ReplyType_ID (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ReplyType_ID(struct soap*, const char*, int, const _ns2__ReplyType_ID *, const char*);
SOAP_FMAC3 _ns2__ReplyType_ID * SOAP_FMAC4 soap_in__ns2__ReplyType_ID(struct soap*, const char*, _ns2__ReplyType_ID *, const char*);

#ifndef soap_write__ns2__ReplyType_ID
#define soap_write__ns2__ReplyType_ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:ReplyType-ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ReplyType_ID * SOAP_FMAC4 soap_get__ns2__ReplyType_ID(struct soap*, _ns2__ReplyType_ID *, const char*, const char*);

#ifndef soap_read__ns2__ReplyType_ID
#define soap_read__ns2__ReplyType_ID(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ReplyType_ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ReplyType_ID * SOAP_FMAC2 soap_instantiate__ns2__ReplyType_ID(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ReplyType_ID * soap_new__ns2__ReplyType_ID(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ReplyType_ID(soap, n, NULL, NULL, NULL); }

inline _ns2__ReplyType_ID * soap_new_req__ns2__ReplyType_ID(struct soap *soap, std::string& __item) { _ns2__ReplyType_ID *_p = soap_instantiate__ns2__ReplyType_ID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ReplyType_ID::__item = __item; } return _p; }

inline _ns2__ReplyType_ID * soap_new_set__ns2__ReplyType_ID(struct soap *soap, std::string& __item, std::string *idType, std::string *idAuthority, enum ns2__IDKindType *kind, std::string *objectType) { _ns2__ReplyType_ID *_p = soap_instantiate__ns2__ReplyType_ID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ReplyType_ID::__item = __item; _p->_ns2__ReplyType_ID::idType = idType; _p->_ns2__ReplyType_ID::idAuthority = idAuthority; _p->_ns2__ReplyType_ID::kind = kind; _p->_ns2__ReplyType_ID::objectType = objectType; } return _p; }

inline void soap_delete__ns2__ReplyType_ID(struct soap *soap, _ns2__ReplyType_ID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ReplyType_ID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__RequestType_ID
#define SOAP_TYPE__ns2__RequestType_ID (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__RequestType_ID(struct soap*, const char*, int, const _ns2__RequestType_ID *, const char*);
SOAP_FMAC3 _ns2__RequestType_ID * SOAP_FMAC4 soap_in__ns2__RequestType_ID(struct soap*, const char*, _ns2__RequestType_ID *, const char*);

#ifndef soap_write__ns2__RequestType_ID
#define soap_write__ns2__RequestType_ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:RequestType-ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__RequestType_ID * SOAP_FMAC4 soap_get__ns2__RequestType_ID(struct soap*, _ns2__RequestType_ID *, const char*, const char*);

#ifndef soap_read__ns2__RequestType_ID
#define soap_read__ns2__RequestType_ID(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__RequestType_ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__RequestType_ID * SOAP_FMAC2 soap_instantiate__ns2__RequestType_ID(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__RequestType_ID * soap_new__ns2__RequestType_ID(struct soap *soap, int n = -1) { return soap_instantiate__ns2__RequestType_ID(soap, n, NULL, NULL, NULL); }

inline _ns2__RequestType_ID * soap_new_req__ns2__RequestType_ID(struct soap *soap, std::string& __item) { _ns2__RequestType_ID *_p = soap_instantiate__ns2__RequestType_ID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__RequestType_ID::__item = __item; } return _p; }

inline _ns2__RequestType_ID * soap_new_set__ns2__RequestType_ID(struct soap *soap, std::string& __item, std::string *idType, std::string *idAuthority, enum ns2__IDKindType *kind, std::string *objectType) { _ns2__RequestType_ID *_p = soap_instantiate__ns2__RequestType_ID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__RequestType_ID::__item = __item; _p->_ns2__RequestType_ID::idType = idType; _p->_ns2__RequestType_ID::idAuthority = idAuthority; _p->_ns2__RequestType_ID::kind = kind; _p->_ns2__RequestType_ID::objectType = objectType; } return _p; }

inline void soap_delete__ns2__RequestType_ID(struct soap *soap, _ns2__RequestType_ID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__RequestType_ID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__CommonValuesType
#define SOAP_TYPE_ns3__CommonValuesType (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CommonValuesType(struct soap*, const char*, int, const ns3__CommonValuesType *, const char*);
SOAP_FMAC3 ns3__CommonValuesType * SOAP_FMAC4 soap_in_ns3__CommonValuesType(struct soap*, const char*, ns3__CommonValuesType *, const char*);

#ifndef soap_write_ns3__CommonValuesType
#define soap_write_ns3__CommonValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:CommonValuesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__CommonValuesType * SOAP_FMAC4 soap_get_ns3__CommonValuesType(struct soap*, ns3__CommonValuesType *, const char*, const char*);

#ifndef soap_read_ns3__CommonValuesType
#define soap_read_ns3__CommonValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__CommonValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__CommonValuesType * SOAP_FMAC2 soap_instantiate_ns3__CommonValuesType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CommonValuesType * soap_new_ns3__CommonValuesType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__CommonValuesType(soap, n, NULL, NULL, NULL); }

inline ns3__CommonValuesType * soap_new_req_ns3__CommonValuesType(struct soap *soap, std::string& Key) { ns3__CommonValuesType *_p = soap_instantiate_ns3__CommonValuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__CommonValuesType::Key = Key; } return _p; }

inline ns3__CommonValuesType * soap_new_set_ns3__CommonValuesType(struct soap *soap, std::string& Key, std::string *Value, bool *UpperLimit, bool *UpperUpperLimit, bool *LowerLimit, bool *LowerLowerLimit, bool *Dead, bool *Invalid) { ns3__CommonValuesType *_p = soap_instantiate_ns3__CommonValuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__CommonValuesType::Key = Key; _p->ns3__CommonValuesType::Value = Value; _p->ns3__CommonValuesType::UpperLimit = UpperLimit; _p->ns3__CommonValuesType::UpperUpperLimit = UpperUpperLimit; _p->ns3__CommonValuesType::LowerLimit = LowerLimit; _p->ns3__CommonValuesType::LowerLowerLimit = LowerLowerLimit; _p->ns3__CommonValuesType::Dead = Dead; _p->ns3__CommonValuesType::Invalid = Invalid; } return _p; }

inline void soap_delete_ns3__CommonValuesType(struct soap *soap, ns3__CommonValuesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__CommonValuesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__DeviceValuesType
#define SOAP_TYPE_ns3__DeviceValuesType (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DeviceValuesType(struct soap*, const char*, int, const ns3__DeviceValuesType *, const char*);
SOAP_FMAC3 ns3__DeviceValuesType * SOAP_FMAC4 soap_in_ns3__DeviceValuesType(struct soap*, const char*, ns3__DeviceValuesType *, const char*);

#ifndef soap_write_ns3__DeviceValuesType
#define soap_write_ns3__DeviceValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:DeviceValuesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__DeviceValuesType * SOAP_FMAC4 soap_get_ns3__DeviceValuesType(struct soap*, ns3__DeviceValuesType *, const char*, const char*);

#ifndef soap_read_ns3__DeviceValuesType
#define soap_read_ns3__DeviceValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__DeviceValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__DeviceValuesType * SOAP_FMAC2 soap_instantiate_ns3__DeviceValuesType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DeviceValuesType * soap_new_ns3__DeviceValuesType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__DeviceValuesType(soap, n, NULL, NULL, NULL); }

inline ns3__DeviceValuesType * soap_new_req_ns3__DeviceValuesType(struct soap *soap, std::string& Code) { ns3__DeviceValuesType *_p = soap_instantiate_ns3__DeviceValuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__DeviceValuesType::Code = Code; } return _p; }

inline ns3__DeviceValuesType * soap_new_set_ns3__DeviceValuesType(struct soap *soap, std::string& Code, std::vector<ns3__CommonValuesType * >& RemoteSignal, std::vector<ns3__CommonValuesType * >& RemoteMeasure, std::vector<ns3__CommonValuesType * >& RemoteDegree) { ns3__DeviceValuesType *_p = soap_instantiate_ns3__DeviceValuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__DeviceValuesType::Code = Code; _p->ns3__DeviceValuesType::RemoteSignal = RemoteSignal; _p->ns3__DeviceValuesType::RemoteMeasure = RemoteMeasure; _p->ns3__DeviceValuesType::RemoteDegree = RemoteDegree; } return _p; }

inline void soap_delete_ns3__DeviceValuesType(struct soap *soap, ns3__DeviceValuesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__DeviceValuesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__DeviceClassType
#define SOAP_TYPE_ns3__DeviceClassType (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DeviceClassType(struct soap*, const char*, int, const ns3__DeviceClassType *, const char*);
SOAP_FMAC3 ns3__DeviceClassType * SOAP_FMAC4 soap_in_ns3__DeviceClassType(struct soap*, const char*, ns3__DeviceClassType *, const char*);

#ifndef soap_write_ns3__DeviceClassType
#define soap_write_ns3__DeviceClassType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:DeviceClassType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__DeviceClassType * SOAP_FMAC4 soap_get_ns3__DeviceClassType(struct soap*, ns3__DeviceClassType *, const char*, const char*);

#ifndef soap_read_ns3__DeviceClassType
#define soap_read_ns3__DeviceClassType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__DeviceClassType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__DeviceClassType * SOAP_FMAC2 soap_instantiate_ns3__DeviceClassType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DeviceClassType * soap_new_ns3__DeviceClassType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__DeviceClassType(soap, n, NULL, NULL, NULL); }

inline ns3__DeviceClassType * soap_new_req_ns3__DeviceClassType(struct soap *soap, std::string& ClassName) { ns3__DeviceClassType *_p = soap_instantiate_ns3__DeviceClassType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__DeviceClassType::ClassName = ClassName; } return _p; }

inline ns3__DeviceClassType * soap_new_set_ns3__DeviceClassType(struct soap *soap, std::string& ClassName, std::vector<ns3__DeviceValuesType * >& Devices) { ns3__DeviceClassType *_p = soap_instantiate_ns3__DeviceClassType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__DeviceClassType::ClassName = ClassName; _p->ns3__DeviceClassType::Devices = Devices; } return _p; }

inline void soap_delete_ns3__DeviceClassType(struct soap *soap, ns3__DeviceClassType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__DeviceClassType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__ArrayValuesType
#define SOAP_TYPE_ns3__ArrayValuesType (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayValuesType(struct soap*, const char*, int, const ns3__ArrayValuesType *, const char*);
SOAP_FMAC3 ns3__ArrayValuesType * SOAP_FMAC4 soap_in_ns3__ArrayValuesType(struct soap*, const char*, ns3__ArrayValuesType *, const char*);

#ifndef soap_write_ns3__ArrayValuesType
#define soap_write_ns3__ArrayValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:ArrayValuesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ArrayValuesType * SOAP_FMAC4 soap_get_ns3__ArrayValuesType(struct soap*, ns3__ArrayValuesType *, const char*, const char*);

#ifndef soap_read_ns3__ArrayValuesType
#define soap_read_ns3__ArrayValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__ArrayValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__ArrayValuesType * SOAP_FMAC2 soap_instantiate_ns3__ArrayValuesType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayValuesType * soap_new_ns3__ArrayValuesType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__ArrayValuesType(soap, n, NULL, NULL, NULL); }

inline ns3__ArrayValuesType * soap_new_req_ns3__ArrayValuesType(struct soap *soap, std::string& ArrayCode) { ns3__ArrayValuesType *_p = soap_instantiate_ns3__ArrayValuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__ArrayValuesType::ArrayCode = ArrayCode; } return _p; }

inline ns3__ArrayValuesType * soap_new_set_ns3__ArrayValuesType(struct soap *soap, std::string& ArrayCode, std::vector<ns3__DeviceClassType * >& DeviceClasses) { ns3__ArrayValuesType *_p = soap_instantiate_ns3__ArrayValuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__ArrayValuesType::ArrayCode = ArrayCode; _p->ns3__ArrayValuesType::DeviceClasses = DeviceClasses; } return _p; }

inline void soap_delete_ns3__ArrayValuesType(struct soap *soap, ns3__ArrayValuesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ArrayValuesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NameTypeAuthority
#define SOAP_TYPE_ns2__NameTypeAuthority (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NameTypeAuthority(struct soap*, const char*, int, const ns2__NameTypeAuthority *, const char*);
SOAP_FMAC3 ns2__NameTypeAuthority * SOAP_FMAC4 soap_in_ns2__NameTypeAuthority(struct soap*, const char*, ns2__NameTypeAuthority *, const char*);

#ifndef soap_write_ns2__NameTypeAuthority
#define soap_write_ns2__NameTypeAuthority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:NameTypeAuthority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NameTypeAuthority * SOAP_FMAC4 soap_get_ns2__NameTypeAuthority(struct soap*, ns2__NameTypeAuthority *, const char*, const char*);

#ifndef soap_read_ns2__NameTypeAuthority
#define soap_read_ns2__NameTypeAuthority(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NameTypeAuthority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NameTypeAuthority * SOAP_FMAC2 soap_instantiate_ns2__NameTypeAuthority(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NameTypeAuthority * soap_new_ns2__NameTypeAuthority(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NameTypeAuthority(soap, n, NULL, NULL, NULL); }

inline ns2__NameTypeAuthority * soap_new_req_ns2__NameTypeAuthority(struct soap *soap, std::string& name) { ns2__NameTypeAuthority *_p = soap_instantiate_ns2__NameTypeAuthority(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NameTypeAuthority::name = name; } return _p; }

inline ns2__NameTypeAuthority * soap_new_set_ns2__NameTypeAuthority(struct soap *soap, std::string& name, std::string *description) { ns2__NameTypeAuthority *_p = soap_instantiate_ns2__NameTypeAuthority(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NameTypeAuthority::name = name; _p->ns2__NameTypeAuthority::description = description; } return _p; }

inline void soap_delete_ns2__NameTypeAuthority(struct soap *soap, ns2__NameTypeAuthority *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NameTypeAuthority(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Name
#define SOAP_TYPE_ns2__Name (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Name(struct soap*, const char*, int, const ns2__Name *, const char*);
SOAP_FMAC3 ns2__Name * SOAP_FMAC4 soap_in_ns2__Name(struct soap*, const char*, ns2__Name *, const char*);

#ifndef soap_write_ns2__Name
#define soap_write_ns2__Name(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:Name", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Name * SOAP_FMAC4 soap_get_ns2__Name(struct soap*, ns2__Name *, const char*, const char*);

#ifndef soap_read_ns2__Name
#define soap_read_ns2__Name(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Name(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Name * SOAP_FMAC2 soap_instantiate_ns2__Name(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Name * soap_new_ns2__Name(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Name(soap, n, NULL, NULL, NULL); }

inline ns2__Name * soap_new_req_ns2__Name(struct soap *soap, std::string& name) { ns2__Name *_p = soap_instantiate_ns2__Name(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Name::name = name; } return _p; }

inline ns2__Name * soap_new_set_ns2__Name(struct soap *soap, std::string& name, ns2__NameType *NameType) { ns2__Name *_p = soap_instantiate_ns2__Name(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Name::name = name; _p->ns2__Name::NameType = NameType; } return _p; }

inline void soap_delete_ns2__Name(struct soap *soap, ns2__Name *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Name(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NameType
#define SOAP_TYPE_ns2__NameType (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NameType(struct soap*, const char*, int, const ns2__NameType *, const char*);
SOAP_FMAC3 ns2__NameType * SOAP_FMAC4 soap_in_ns2__NameType(struct soap*, const char*, ns2__NameType *, const char*);

#ifndef soap_write_ns2__NameType
#define soap_write_ns2__NameType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:NameType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NameType * SOAP_FMAC4 soap_get_ns2__NameType(struct soap*, ns2__NameType *, const char*, const char*);

#ifndef soap_read_ns2__NameType
#define soap_read_ns2__NameType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NameType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NameType * SOAP_FMAC2 soap_instantiate_ns2__NameType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NameType * soap_new_ns2__NameType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NameType(soap, n, NULL, NULL, NULL); }

inline ns2__NameType * soap_new_req_ns2__NameType(struct soap *soap, std::string& name) { ns2__NameType *_p = soap_instantiate_ns2__NameType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NameType::name = name; } return _p; }

inline ns2__NameType * soap_new_set_ns2__NameType(struct soap *soap, std::string& name, std::string *description, ns2__NameTypeAuthority *NameTypeAuthority) { ns2__NameType *_p = soap_instantiate_ns2__NameType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NameType::name = name; _p->ns2__NameType::description = description; _p->ns2__NameType::NameTypeAuthority = NameTypeAuthority; } return _p; }

inline void soap_delete_ns2__NameType(struct soap *soap, ns2__NameType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NameType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ObjectType
#define SOAP_TYPE_ns2__ObjectType (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ObjectType(struct soap*, const char*, int, const ns2__ObjectType *, const char*);
SOAP_FMAC3 ns2__ObjectType * SOAP_FMAC4 soap_in_ns2__ObjectType(struct soap*, const char*, ns2__ObjectType *, const char*);

#ifndef soap_write_ns2__ObjectType
#define soap_write_ns2__ObjectType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:ObjectType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectType * SOAP_FMAC4 soap_get_ns2__ObjectType(struct soap*, ns2__ObjectType *, const char*, const char*);

#ifndef soap_read_ns2__ObjectType
#define soap_read_ns2__ObjectType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ObjectType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ObjectType * SOAP_FMAC2 soap_instantiate_ns2__ObjectType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ObjectType * soap_new_ns2__ObjectType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ObjectType(soap, n, NULL, NULL, NULL); }

inline ns2__ObjectType * soap_new_req_ns2__ObjectType(struct soap *soap) { ns2__ObjectType *_p = soap_instantiate_ns2__ObjectType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ObjectType * soap_new_set_ns2__ObjectType(struct soap *soap, std::string *mRID, std::vector<ns2__Name * >& Name, std::string *objectType) { ns2__ObjectType *_p = soap_instantiate_ns2__ObjectType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ObjectType::mRID = mRID; _p->ns2__ObjectType::Name = Name; _p->ns2__ObjectType::objectType = objectType; } return _p; }

inline void soap_delete_ns2__ObjectType(struct soap *soap, ns2__ObjectType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ObjectType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__LocationType
#define SOAP_TYPE_ns2__LocationType (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__LocationType(struct soap*, const char*, int, const ns2__LocationType *, const char*);
SOAP_FMAC3 ns2__LocationType * SOAP_FMAC4 soap_in_ns2__LocationType(struct soap*, const char*, ns2__LocationType *, const char*);

#ifndef soap_write_ns2__LocationType
#define soap_write_ns2__LocationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:LocationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__LocationType * SOAP_FMAC4 soap_get_ns2__LocationType(struct soap*, ns2__LocationType *, const char*, const char*);

#ifndef soap_read_ns2__LocationType
#define soap_read_ns2__LocationType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__LocationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__LocationType * SOAP_FMAC2 soap_instantiate_ns2__LocationType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__LocationType * soap_new_ns2__LocationType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__LocationType(soap, n, NULL, NULL, NULL); }

inline ns2__LocationType * soap_new_req_ns2__LocationType(struct soap *soap) { ns2__LocationType *_p = soap_instantiate_ns2__LocationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__LocationType * soap_new_set_ns2__LocationType(struct soap *soap, std::string *node, std::string *pipeline, std::string *stage) { ns2__LocationType *_p = soap_instantiate_ns2__LocationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__LocationType::node = node; _p->ns2__LocationType::pipeline = pipeline; _p->ns2__LocationType::stage = stage; } return _p; }

inline void soap_delete_ns2__LocationType(struct soap *soap, ns2__LocationType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__LocationType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OptionType
#define SOAP_TYPE_ns2__OptionType (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OptionType(struct soap*, const char*, int, const ns2__OptionType *, const char*);
SOAP_FMAC3 ns2__OptionType * SOAP_FMAC4 soap_in_ns2__OptionType(struct soap*, const char*, ns2__OptionType *, const char*);

#ifndef soap_write_ns2__OptionType
#define soap_write_ns2__OptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:OptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OptionType * SOAP_FMAC4 soap_get_ns2__OptionType(struct soap*, ns2__OptionType *, const char*, const char*);

#ifndef soap_read_ns2__OptionType
#define soap_read_ns2__OptionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OptionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OptionType * SOAP_FMAC2 soap_instantiate_ns2__OptionType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OptionType * soap_new_ns2__OptionType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OptionType(soap, n, NULL, NULL, NULL); }

inline ns2__OptionType * soap_new_req_ns2__OptionType(struct soap *soap, std::string& name) { ns2__OptionType *_p = soap_instantiate_ns2__OptionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OptionType::name = name; } return _p; }

inline ns2__OptionType * soap_new_set_ns2__OptionType(struct soap *soap, std::string& name, std::string *value) { ns2__OptionType *_p = soap_instantiate_ns2__OptionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OptionType::name = name; _p->ns2__OptionType::value = value; } return _p; }

inline void soap_delete_ns2__OptionType(struct soap *soap, ns2__OptionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OptionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ErrorType
#define SOAP_TYPE_ns2__ErrorType (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ErrorType(struct soap*, const char*, int, const ns2__ErrorType *, const char*);
SOAP_FMAC3 ns2__ErrorType * SOAP_FMAC4 soap_in_ns2__ErrorType(struct soap*, const char*, ns2__ErrorType *, const char*);

#ifndef soap_write_ns2__ErrorType
#define soap_write_ns2__ErrorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:ErrorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ErrorType * SOAP_FMAC4 soap_get_ns2__ErrorType(struct soap*, ns2__ErrorType *, const char*, const char*);

#ifndef soap_read_ns2__ErrorType
#define soap_read_ns2__ErrorType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ErrorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ErrorType * SOAP_FMAC2 soap_instantiate_ns2__ErrorType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ErrorType * soap_new_ns2__ErrorType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ErrorType(soap, n, NULL, NULL, NULL); }

inline ns2__ErrorType * soap_new_req_ns2__ErrorType(struct soap *soap, std::string& code) { ns2__ErrorType *_p = soap_instantiate_ns2__ErrorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ErrorType::code = code; } return _p; }

inline ns2__ErrorType * soap_new_set_ns2__ErrorType(struct soap *soap, std::string& code, enum _ns2__ErrorType_level *level, std::string *reason, std::string *details, std::string *xpath, std::string *stackTrace, ns2__LocationType *Location, _ns2__ErrorType_ID *ID, _ns2__ErrorType_relatedID *relatedID, ns2__ObjectType *object, std::string *operationId) { ns2__ErrorType *_p = soap_instantiate_ns2__ErrorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ErrorType::code = code; _p->ns2__ErrorType::level = level; _p->ns2__ErrorType::reason = reason; _p->ns2__ErrorType::details = details; _p->ns2__ErrorType::xpath = xpath; _p->ns2__ErrorType::stackTrace = stackTrace; _p->ns2__ErrorType::Location = Location; _p->ns2__ErrorType::ID = ID; _p->ns2__ErrorType::relatedID = relatedID; _p->ns2__ErrorType::object = object; _p->ns2__ErrorType::operationId = operationId; } return _p; }

inline void soap_delete_ns2__ErrorType(struct soap *soap, ns2__ErrorType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ErrorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EventMessageType
#define SOAP_TYPE_ns2__EventMessageType (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EventMessageType(struct soap*, const char*, int, const ns2__EventMessageType *, const char*);
SOAP_FMAC3 ns2__EventMessageType * SOAP_FMAC4 soap_in_ns2__EventMessageType(struct soap*, const char*, ns2__EventMessageType *, const char*);

#ifndef soap_write_ns2__EventMessageType
#define soap_write_ns2__EventMessageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:EventMessageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventMessageType * SOAP_FMAC4 soap_get_ns2__EventMessageType(struct soap*, ns2__EventMessageType *, const char*, const char*);

#ifndef soap_read_ns2__EventMessageType
#define soap_read_ns2__EventMessageType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EventMessageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EventMessageType * SOAP_FMAC2 soap_instantiate_ns2__EventMessageType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EventMessageType * soap_new_ns2__EventMessageType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EventMessageType(soap, n, NULL, NULL, NULL); }

inline ns2__EventMessageType * soap_new_req_ns2__EventMessageType(struct soap *soap, ns2__HeaderType *Header) { ns2__EventMessageType *_p = soap_instantiate_ns2__EventMessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventMessageType::Header = Header; } return _p; }

inline ns2__EventMessageType * soap_new_set_ns2__EventMessageType(struct soap *soap, ns2__HeaderType *Header, ns2__PayloadType *Payload) { ns2__EventMessageType *_p = soap_instantiate_ns2__EventMessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventMessageType::Header = Header; _p->ns2__EventMessageType::Payload = Payload; } return _p; }

inline void soap_delete_ns2__EventMessageType(struct soap *soap, ns2__EventMessageType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EventMessageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FaultMessageType
#define SOAP_TYPE_ns2__FaultMessageType (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FaultMessageType(struct soap*, const char*, int, const ns2__FaultMessageType *, const char*);
SOAP_FMAC3 ns2__FaultMessageType * SOAP_FMAC4 soap_in_ns2__FaultMessageType(struct soap*, const char*, ns2__FaultMessageType *, const char*);

#ifndef soap_write_ns2__FaultMessageType
#define soap_write_ns2__FaultMessageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:FaultMessageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FaultMessageType * SOAP_FMAC4 soap_get_ns2__FaultMessageType(struct soap*, ns2__FaultMessageType *, const char*, const char*);

#ifndef soap_read_ns2__FaultMessageType
#define soap_read_ns2__FaultMessageType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FaultMessageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FaultMessageType * SOAP_FMAC2 soap_instantiate_ns2__FaultMessageType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FaultMessageType * soap_new_ns2__FaultMessageType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FaultMessageType(soap, n, NULL, NULL, NULL); }

inline ns2__FaultMessageType * soap_new_req_ns2__FaultMessageType(struct soap *soap, ns2__ReplyType *Reply) { ns2__FaultMessageType *_p = soap_instantiate_ns2__FaultMessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FaultMessageType::Reply = Reply; } return _p; }

inline ns2__FaultMessageType * soap_new_set_ns2__FaultMessageType(struct soap *soap, ns2__ReplyType *Reply) { ns2__FaultMessageType *_p = soap_instantiate_ns2__FaultMessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FaultMessageType::Reply = Reply; } return _p; }

inline void soap_delete_ns2__FaultMessageType(struct soap *soap, ns2__FaultMessageType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FaultMessageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ResponseMessageType
#define SOAP_TYPE_ns2__ResponseMessageType (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ResponseMessageType(struct soap*, const char*, int, const ns2__ResponseMessageType *, const char*);
SOAP_FMAC3 ns2__ResponseMessageType * SOAP_FMAC4 soap_in_ns2__ResponseMessageType(struct soap*, const char*, ns2__ResponseMessageType *, const char*);

#ifndef soap_write_ns2__ResponseMessageType
#define soap_write_ns2__ResponseMessageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:ResponseMessageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ResponseMessageType * SOAP_FMAC4 soap_get_ns2__ResponseMessageType(struct soap*, ns2__ResponseMessageType *, const char*, const char*);

#ifndef soap_read_ns2__ResponseMessageType
#define soap_read_ns2__ResponseMessageType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ResponseMessageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ResponseMessageType * SOAP_FMAC2 soap_instantiate_ns2__ResponseMessageType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ResponseMessageType * soap_new_ns2__ResponseMessageType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ResponseMessageType(soap, n, NULL, NULL, NULL); }

inline ns2__ResponseMessageType * soap_new_req_ns2__ResponseMessageType(struct soap *soap, ns2__HeaderType *Header, ns2__ReplyType *Reply) { ns2__ResponseMessageType *_p = soap_instantiate_ns2__ResponseMessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ResponseMessageType::Header = Header; _p->ns2__ResponseMessageType::Reply = Reply; } return _p; }

inline ns2__ResponseMessageType * soap_new_set_ns2__ResponseMessageType(struct soap *soap, ns2__HeaderType *Header, ns2__ReplyType *Reply, ns2__PayloadType *Payload) { ns2__ResponseMessageType *_p = soap_instantiate_ns2__ResponseMessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ResponseMessageType::Header = Header; _p->ns2__ResponseMessageType::Reply = Reply; _p->ns2__ResponseMessageType::Payload = Payload; } return _p; }

inline void soap_delete_ns2__ResponseMessageType(struct soap *soap, ns2__ResponseMessageType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ResponseMessageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RequestMessageType
#define SOAP_TYPE_ns2__RequestMessageType (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RequestMessageType(struct soap*, const char*, int, const ns2__RequestMessageType *, const char*);
SOAP_FMAC3 ns2__RequestMessageType * SOAP_FMAC4 soap_in_ns2__RequestMessageType(struct soap*, const char*, ns2__RequestMessageType *, const char*);

#ifndef soap_write_ns2__RequestMessageType
#define soap_write_ns2__RequestMessageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:RequestMessageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RequestMessageType * SOAP_FMAC4 soap_get_ns2__RequestMessageType(struct soap*, ns2__RequestMessageType *, const char*, const char*);

#ifndef soap_read_ns2__RequestMessageType
#define soap_read_ns2__RequestMessageType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RequestMessageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RequestMessageType * SOAP_FMAC2 soap_instantiate_ns2__RequestMessageType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RequestMessageType * soap_new_ns2__RequestMessageType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RequestMessageType(soap, n, NULL, NULL, NULL); }

inline ns2__RequestMessageType * soap_new_req_ns2__RequestMessageType(struct soap *soap, ns2__HeaderType *Header) { ns2__RequestMessageType *_p = soap_instantiate_ns2__RequestMessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RequestMessageType::Header = Header; } return _p; }

inline ns2__RequestMessageType * soap_new_set_ns2__RequestMessageType(struct soap *soap, ns2__HeaderType *Header, ns2__RequestType *Request, ns2__PayloadType *Payload) { ns2__RequestMessageType *_p = soap_instantiate_ns2__RequestMessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RequestMessageType::Header = Header; _p->ns2__RequestMessageType::Request = Request; _p->ns2__RequestMessageType::Payload = Payload; } return _p; }

inline void soap_delete_ns2__RequestMessageType(struct soap *soap, ns2__RequestMessageType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RequestMessageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MessageType
#define SOAP_TYPE_ns2__MessageType (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MessageType(struct soap*, const char*, int, const ns2__MessageType *, const char*);
SOAP_FMAC3 ns2__MessageType * SOAP_FMAC4 soap_in_ns2__MessageType(struct soap*, const char*, ns2__MessageType *, const char*);

#ifndef soap_write_ns2__MessageType
#define soap_write_ns2__MessageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:MessageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MessageType * SOAP_FMAC4 soap_get_ns2__MessageType(struct soap*, ns2__MessageType *, const char*, const char*);

#ifndef soap_read_ns2__MessageType
#define soap_read_ns2__MessageType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MessageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MessageType * SOAP_FMAC2 soap_instantiate_ns2__MessageType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MessageType * soap_new_ns2__MessageType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MessageType(soap, n, NULL, NULL, NULL); }

inline ns2__MessageType * soap_new_req_ns2__MessageType(struct soap *soap, ns2__HeaderType *Header) { ns2__MessageType *_p = soap_instantiate_ns2__MessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MessageType::Header = Header; } return _p; }

inline ns2__MessageType * soap_new_set_ns2__MessageType(struct soap *soap, ns2__HeaderType *Header, ns2__RequestType *Request, ns2__ReplyType *Reply, ns2__PayloadType *Payload) { ns2__MessageType *_p = soap_instantiate_ns2__MessageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MessageType::Header = Header; _p->ns2__MessageType::Request = Request; _p->ns2__MessageType::Reply = Reply; _p->ns2__MessageType::Payload = Payload; } return _p; }

inline void soap_delete_ns2__MessageType(struct soap *soap, ns2__MessageType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MessageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MessageProperty
#define SOAP_TYPE_ns2__MessageProperty (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MessageProperty(struct soap*, const char*, int, const ns2__MessageProperty *, const char*);
SOAP_FMAC3 ns2__MessageProperty * SOAP_FMAC4 soap_in_ns2__MessageProperty(struct soap*, const char*, ns2__MessageProperty *, const char*);

#ifndef soap_write_ns2__MessageProperty
#define soap_write_ns2__MessageProperty(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:MessageProperty", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MessageProperty * SOAP_FMAC4 soap_get_ns2__MessageProperty(struct soap*, ns2__MessageProperty *, const char*, const char*);

#ifndef soap_read_ns2__MessageProperty
#define soap_read_ns2__MessageProperty(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MessageProperty(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MessageProperty * SOAP_FMAC2 soap_instantiate_ns2__MessageProperty(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MessageProperty * soap_new_ns2__MessageProperty(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MessageProperty(soap, n, NULL, NULL, NULL); }

inline ns2__MessageProperty * soap_new_req_ns2__MessageProperty(struct soap *soap, std::string& Name) { ns2__MessageProperty *_p = soap_instantiate_ns2__MessageProperty(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MessageProperty::Name = Name; } return _p; }

inline ns2__MessageProperty * soap_new_set_ns2__MessageProperty(struct soap *soap, std::string& Name, std::string *Value) { ns2__MessageProperty *_p = soap_instantiate_ns2__MessageProperty(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MessageProperty::Name = Name; _p->ns2__MessageProperty::Value = Value; } return _p; }

inline void soap_delete_ns2__MessageProperty(struct soap *soap, ns2__MessageProperty *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MessageProperty(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__HeaderType
#define SOAP_TYPE_ns2__HeaderType (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HeaderType(struct soap*, const char*, int, const ns2__HeaderType *, const char*);
SOAP_FMAC3 ns2__HeaderType * SOAP_FMAC4 soap_in_ns2__HeaderType(struct soap*, const char*, ns2__HeaderType *, const char*);

#ifndef soap_write_ns2__HeaderType
#define soap_write_ns2__HeaderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:HeaderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__HeaderType * SOAP_FMAC4 soap_get_ns2__HeaderType(struct soap*, ns2__HeaderType *, const char*, const char*);

#ifndef soap_read_ns2__HeaderType
#define soap_read_ns2__HeaderType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__HeaderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__HeaderType * SOAP_FMAC2 soap_instantiate_ns2__HeaderType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HeaderType * soap_new_ns2__HeaderType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__HeaderType(soap, n, NULL, NULL, NULL); }

inline ns2__HeaderType * soap_new_req_ns2__HeaderType(struct soap *soap, enum _ns2__HeaderType_Verb Verb, std::string& Noun) { ns2__HeaderType *_p = soap_instantiate_ns2__HeaderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__HeaderType::Verb = Verb; _p->ns2__HeaderType::Noun = Noun; } return _p; }

inline ns2__HeaderType * soap_new_set_ns2__HeaderType(struct soap *soap, enum _ns2__HeaderType_Verb Verb, std::string& Noun, std::string *Revision, ns2__ReplayDetectionType *ReplayDetection, std::string *Context, time_t *Timestamp, std::string *Source, bool *AsyncReplyFlag, std::string *ReplyAddress, bool *AckRequired, ns2__UserType *User, std::string *MessageID, std::string *CorrelationID, std::string *Comment, std::vector<ns2__MessageProperty * >& Property, std::vector<char * >& __any) { ns2__HeaderType *_p = soap_instantiate_ns2__HeaderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__HeaderType::Verb = Verb; _p->ns2__HeaderType::Noun = Noun; _p->ns2__HeaderType::Revision = Revision; _p->ns2__HeaderType::ReplayDetection = ReplayDetection; _p->ns2__HeaderType::Context = Context; _p->ns2__HeaderType::Timestamp = Timestamp; _p->ns2__HeaderType::Source = Source; _p->ns2__HeaderType::AsyncReplyFlag = AsyncReplyFlag; _p->ns2__HeaderType::ReplyAddress = ReplyAddress; _p->ns2__HeaderType::AckRequired = AckRequired; _p->ns2__HeaderType::User = User; _p->ns2__HeaderType::MessageID = MessageID; _p->ns2__HeaderType::CorrelationID = CorrelationID; _p->ns2__HeaderType::Comment = Comment; _p->ns2__HeaderType::Property = Property; _p->ns2__HeaderType::__any = __any; } return _p; }

inline void soap_delete_ns2__HeaderType(struct soap *soap, ns2__HeaderType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__HeaderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__UserType
#define SOAP_TYPE_ns2__UserType (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UserType(struct soap*, const char*, int, const ns2__UserType *, const char*);
SOAP_FMAC3 ns2__UserType * SOAP_FMAC4 soap_in_ns2__UserType(struct soap*, const char*, ns2__UserType *, const char*);

#ifndef soap_write_ns2__UserType
#define soap_write_ns2__UserType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:UserType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__UserType * SOAP_FMAC4 soap_get_ns2__UserType(struct soap*, ns2__UserType *, const char*, const char*);

#ifndef soap_read_ns2__UserType
#define soap_read_ns2__UserType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__UserType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__UserType * SOAP_FMAC2 soap_instantiate_ns2__UserType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__UserType * soap_new_ns2__UserType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__UserType(soap, n, NULL, NULL, NULL); }

inline ns2__UserType * soap_new_req_ns2__UserType(struct soap *soap, std::string& UserID) { ns2__UserType *_p = soap_instantiate_ns2__UserType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__UserType::UserID = UserID; } return _p; }

inline ns2__UserType * soap_new_set_ns2__UserType(struct soap *soap, std::string& UserID, std::string *Organization) { ns2__UserType *_p = soap_instantiate_ns2__UserType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__UserType::UserID = UserID; _p->ns2__UserType::Organization = Organization; } return _p; }

inline void soap_delete_ns2__UserType(struct soap *soap, ns2__UserType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__UserType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReplayDetectionType
#define SOAP_TYPE_ns2__ReplayDetectionType (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReplayDetectionType(struct soap*, const char*, int, const ns2__ReplayDetectionType *, const char*);
SOAP_FMAC3 ns2__ReplayDetectionType * SOAP_FMAC4 soap_in_ns2__ReplayDetectionType(struct soap*, const char*, ns2__ReplayDetectionType *, const char*);

#ifndef soap_write_ns2__ReplayDetectionType
#define soap_write_ns2__ReplayDetectionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:ReplayDetectionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReplayDetectionType * SOAP_FMAC4 soap_get_ns2__ReplayDetectionType(struct soap*, ns2__ReplayDetectionType *, const char*, const char*);

#ifndef soap_read_ns2__ReplayDetectionType
#define soap_read_ns2__ReplayDetectionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReplayDetectionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReplayDetectionType * SOAP_FMAC2 soap_instantiate_ns2__ReplayDetectionType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReplayDetectionType * soap_new_ns2__ReplayDetectionType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReplayDetectionType(soap, n, NULL, NULL, NULL); }

inline ns2__ReplayDetectionType * soap_new_req_ns2__ReplayDetectionType(struct soap *soap, std::string& Nonce, time_t Created) { ns2__ReplayDetectionType *_p = soap_instantiate_ns2__ReplayDetectionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReplayDetectionType::Nonce = Nonce; _p->ns2__ReplayDetectionType::Created = Created; } return _p; }

inline ns2__ReplayDetectionType * soap_new_set_ns2__ReplayDetectionType(struct soap *soap, std::string& Nonce, time_t Created) { ns2__ReplayDetectionType *_p = soap_instantiate_ns2__ReplayDetectionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReplayDetectionType::Nonce = Nonce; _p->ns2__ReplayDetectionType::Created = Created; } return _p; }

inline void soap_delete_ns2__ReplayDetectionType(struct soap *soap, ns2__ReplayDetectionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReplayDetectionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OperationSet
#define SOAP_TYPE_ns2__OperationSet (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OperationSet(struct soap*, const char*, int, const ns2__OperationSet *, const char*);
SOAP_FMAC3 ns2__OperationSet * SOAP_FMAC4 soap_in_ns2__OperationSet(struct soap*, const char*, ns2__OperationSet *, const char*);

#ifndef soap_write_ns2__OperationSet
#define soap_write_ns2__OperationSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:OperationSet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OperationSet * SOAP_FMAC4 soap_get_ns2__OperationSet(struct soap*, ns2__OperationSet *, const char*, const char*);

#ifndef soap_read_ns2__OperationSet
#define soap_read_ns2__OperationSet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OperationSet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OperationSet * SOAP_FMAC2 soap_instantiate_ns2__OperationSet(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OperationSet * soap_new_ns2__OperationSet(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OperationSet(soap, n, NULL, NULL, NULL); }

inline ns2__OperationSet * soap_new_req_ns2__OperationSet(struct soap *soap) { ns2__OperationSet *_p = soap_instantiate_ns2__OperationSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OperationSet * soap_new_set_ns2__OperationSet(struct soap *soap, bool *enforceMsgSequence, bool *enforceTransactionalIntegrity, std::vector<ns2__OperationType * >& Operation) { ns2__OperationSet *_p = soap_instantiate_ns2__OperationSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OperationSet::enforceMsgSequence = enforceMsgSequence; _p->ns2__OperationSet::enforceTransactionalIntegrity = enforceTransactionalIntegrity; _p->ns2__OperationSet::Operation = Operation; } return _p; }

inline void soap_delete_ns2__OperationSet(struct soap *soap, ns2__OperationSet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OperationSet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OperationType
#define SOAP_TYPE_ns2__OperationType (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OperationType(struct soap*, const char*, int, const ns2__OperationType *, const char*);
SOAP_FMAC3 ns2__OperationType * SOAP_FMAC4 soap_in_ns2__OperationType(struct soap*, const char*, ns2__OperationType *, const char*);

#ifndef soap_write_ns2__OperationType
#define soap_write_ns2__OperationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:OperationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OperationType * SOAP_FMAC4 soap_get_ns2__OperationType(struct soap*, ns2__OperationType *, const char*, const char*);

#ifndef soap_read_ns2__OperationType
#define soap_read_ns2__OperationType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OperationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OperationType * SOAP_FMAC2 soap_instantiate_ns2__OperationType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OperationType * soap_new_ns2__OperationType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OperationType(soap, n, NULL, NULL, NULL); }

inline ns2__OperationType * soap_new_req_ns2__OperationType(struct soap *soap, std::string& operationId) { ns2__OperationType *_p = soap_instantiate_ns2__OperationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OperationType::operationId = operationId; } return _p; }

inline ns2__OperationType * soap_new_set_ns2__OperationType(struct soap *soap, std::string& operationId, std::string *noun, std::string *verb, bool elementOperation, char *__any) { ns2__OperationType *_p = soap_instantiate_ns2__OperationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OperationType::operationId = operationId; _p->ns2__OperationType::noun = noun; _p->ns2__OperationType::verb = verb; _p->ns2__OperationType::elementOperation = elementOperation; _p->ns2__OperationType::__any = __any; } return _p; }

inline void soap_delete_ns2__OperationType(struct soap *soap, ns2__OperationType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OperationType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PayloadType
#define SOAP_TYPE_ns2__PayloadType (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PayloadType(struct soap*, const char*, int, const ns2__PayloadType *, const char*);
SOAP_FMAC3 ns2__PayloadType * SOAP_FMAC4 soap_in_ns2__PayloadType(struct soap*, const char*, ns2__PayloadType *, const char*);

#ifndef soap_write_ns2__PayloadType
#define soap_write_ns2__PayloadType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:PayloadType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PayloadType * SOAP_FMAC4 soap_get_ns2__PayloadType(struct soap*, ns2__PayloadType *, const char*, const char*);

#ifndef soap_read_ns2__PayloadType
#define soap_read_ns2__PayloadType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PayloadType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PayloadType * SOAP_FMAC2 soap_instantiate_ns2__PayloadType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PayloadType * soap_new_ns2__PayloadType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PayloadType(soap, n, NULL, NULL, NULL); }

inline ns2__PayloadType * soap_new_req_ns2__PayloadType(struct soap *soap, int __union_PayloadType, union _ns2__union_PayloadType& union_PayloadType) { ns2__PayloadType *_p = soap_instantiate_ns2__PayloadType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PayloadType::__union_PayloadType = __union_PayloadType; _p->ns2__PayloadType::union_PayloadType = union_PayloadType; } return _p; }

inline ns2__PayloadType * soap_new_set_ns2__PayloadType(struct soap *soap, int __union_PayloadType, union _ns2__union_PayloadType& union_PayloadType, std::string *Format) { ns2__PayloadType *_p = soap_instantiate_ns2__PayloadType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PayloadType::__union_PayloadType = __union_PayloadType; _p->ns2__PayloadType::union_PayloadType = union_PayloadType; _p->ns2__PayloadType::Format = Format; } return _p; }

inline void soap_delete_ns2__PayloadType(struct soap *soap, ns2__PayloadType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PayloadType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReplyType
#define SOAP_TYPE_ns2__ReplyType (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReplyType(struct soap*, const char*, int, const ns2__ReplyType *, const char*);
SOAP_FMAC3 ns2__ReplyType * SOAP_FMAC4 soap_in_ns2__ReplyType(struct soap*, const char*, ns2__ReplyType *, const char*);

#ifndef soap_write_ns2__ReplyType
#define soap_write_ns2__ReplyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:ReplyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReplyType * SOAP_FMAC4 soap_get_ns2__ReplyType(struct soap*, ns2__ReplyType *, const char*, const char*);

#ifndef soap_read_ns2__ReplyType
#define soap_read_ns2__ReplyType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReplyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReplyType * SOAP_FMAC2 soap_instantiate_ns2__ReplyType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReplyType * soap_new_ns2__ReplyType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReplyType(soap, n, NULL, NULL, NULL); }

inline ns2__ReplyType * soap_new_req_ns2__ReplyType(struct soap *soap, enum _ns2__ReplyType_Result Result) { ns2__ReplyType *_p = soap_instantiate_ns2__ReplyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReplyType::Result = Result; } return _p; }

inline ns2__ReplyType * soap_new_set_ns2__ReplyType(struct soap *soap, enum _ns2__ReplyType_Result Result, std::vector<ns2__ErrorType * >& Error, std::vector<_ns2__ReplyType_ID >*ID, std::vector<char * >& __any, std::string *operationId) { ns2__ReplyType *_p = soap_instantiate_ns2__ReplyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReplyType::Result = Result; _p->ns2__ReplyType::Error = Error; _p->ns2__ReplyType::ID = ID; _p->ns2__ReplyType::__any = __any; _p->ns2__ReplyType::operationId = operationId; } return _p; }

inline void soap_delete_ns2__ReplyType(struct soap *soap, ns2__ReplyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReplyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RequestType
#define SOAP_TYPE_ns2__RequestType (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RequestType(struct soap*, const char*, int, const ns2__RequestType *, const char*);
SOAP_FMAC3 ns2__RequestType * SOAP_FMAC4 soap_in_ns2__RequestType(struct soap*, const char*, ns2__RequestType *, const char*);

#ifndef soap_write_ns2__RequestType
#define soap_write_ns2__RequestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:RequestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RequestType * SOAP_FMAC4 soap_get_ns2__RequestType(struct soap*, ns2__RequestType *, const char*, const char*);

#ifndef soap_read_ns2__RequestType
#define soap_read_ns2__RequestType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RequestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RequestType * SOAP_FMAC2 soap_instantiate_ns2__RequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RequestType * soap_new_ns2__RequestType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RequestType(soap, n, NULL, NULL, NULL); }

inline ns2__RequestType * soap_new_req_ns2__RequestType(struct soap *soap) { ns2__RequestType *_p = soap_instantiate_ns2__RequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RequestType * soap_new_set_ns2__RequestType(struct soap *soap, time_t *StartTime, time_t *EndTime, std::vector<ns2__OptionType * >& Option, std::vector<_ns2__RequestType_ID >*ID, std::vector<char * >& __any) { ns2__RequestType *_p = soap_instantiate_ns2__RequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RequestType::StartTime = StartTime; _p->ns2__RequestType::EndTime = EndTime; _p->ns2__RequestType::Option = Option; _p->ns2__RequestType::ID = ID; _p->ns2__RequestType::__any = __any; } return _p; }

inline void soap_delete_ns2__RequestType(struct soap *soap, ns2__RequestType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RequestType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (10)
#endif

#define soap_default_xsd__integer(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__integer
#define soap_write_xsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__integer(soap, data),0) || soap_put_xsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__integer
#define soap_read_xsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_copy_xsd__integer soap_copy_std__string

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__QName(soap, data),0) || soap_put_xsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline std::string * soap_new_set_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline void soap_delete_xsd__QName(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__Response
#define SOAP_TYPE___ns1__Response (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Response(struct soap*, struct __ns1__Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Response(struct soap*, const struct __ns1__Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Response(struct soap*, const char*, int, const struct __ns1__Response *, const char*);
SOAP_FMAC3 struct __ns1__Response * SOAP_FMAC4 soap_in___ns1__Response(struct soap*, const char*, struct __ns1__Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Response(struct soap*, const struct __ns1__Response *, const char*, const char*);

#ifndef soap_write___ns1__Response
#define soap_write___ns1__Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__Response(soap, data),0) || soap_put___ns1__Response(soap, data, "-ns1:Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Response * SOAP_FMAC4 soap_get___ns1__Response(struct soap*, struct __ns1__Response *, const char*, const char*);

#ifndef soap_read___ns1__Response
#define soap_read___ns1__Response(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__Response * SOAP_FMAC2 soap_instantiate___ns1__Response(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Response * soap_new___ns1__Response(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Response(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Response * soap_new_req___ns1__Response(struct soap *soap) { struct __ns1__Response *_p = soap_instantiate___ns1__Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Response(soap, _p); } return _p; }

inline struct __ns1__Response * soap_new_set___ns1__Response(struct soap *soap, ns2__ResponseMessageType *ns2__ResponseMessage) { struct __ns1__Response *_p = soap_instantiate___ns1__Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Response(soap, _p); _p->ns2__ResponseMessage = ns2__ResponseMessage; } return _p; }

inline void soap_delete___ns1__Response(struct soap *soap, struct __ns1__Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__ResponseResponse
#define SOAP_TYPE___ns1__ResponseResponse (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ResponseResponse(struct soap*, struct __ns1__ResponseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ResponseResponse(struct soap*, const struct __ns1__ResponseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ResponseResponse(struct soap*, const char*, int, const struct __ns1__ResponseResponse *, const char*);
SOAP_FMAC3 struct __ns1__ResponseResponse * SOAP_FMAC4 soap_in___ns1__ResponseResponse(struct soap*, const char*, struct __ns1__ResponseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ResponseResponse(struct soap*, const struct __ns1__ResponseResponse *, const char*, const char*);

#ifndef soap_write___ns1__ResponseResponse
#define soap_write___ns1__ResponseResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__ResponseResponse(soap, data),0) || soap_put___ns1__ResponseResponse(soap, data, "-ns1:ResponseResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ResponseResponse * SOAP_FMAC4 soap_get___ns1__ResponseResponse(struct soap*, struct __ns1__ResponseResponse *, const char*, const char*);

#ifndef soap_read___ns1__ResponseResponse
#define soap_read___ns1__ResponseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__ResponseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__ResponseResponse * SOAP_FMAC2 soap_instantiate___ns1__ResponseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ResponseResponse * soap_new___ns1__ResponseResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ResponseResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ResponseResponse * soap_new_req___ns1__ResponseResponse(struct soap *soap) { struct __ns1__ResponseResponse *_p = soap_instantiate___ns1__ResponseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__ResponseResponse(soap, _p); } return _p; }

inline struct __ns1__ResponseResponse * soap_new_set___ns1__ResponseResponse(struct soap *soap, ns2__ResponseMessageType *ns2__ResponseMessage) { struct __ns1__ResponseResponse *_p = soap_instantiate___ns1__ResponseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__ResponseResponse(soap, _p); _p->ns2__ResponseMessage = ns2__ResponseMessage; } return _p; }

inline void soap_delete___ns1__ResponseResponse(struct soap *soap, struct __ns1__ResponseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ResponseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Request
#define SOAP_TYPE___ns1__Request (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Request(struct soap*, struct __ns1__Request *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Request(struct soap*, const struct __ns1__Request *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Request(struct soap*, const char*, int, const struct __ns1__Request *, const char*);
SOAP_FMAC3 struct __ns1__Request * SOAP_FMAC4 soap_in___ns1__Request(struct soap*, const char*, struct __ns1__Request *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Request(struct soap*, const struct __ns1__Request *, const char*, const char*);

#ifndef soap_write___ns1__Request
#define soap_write___ns1__Request(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__Request(soap, data),0) || soap_put___ns1__Request(soap, data, "-ns1:Request", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Request * SOAP_FMAC4 soap_get___ns1__Request(struct soap*, struct __ns1__Request *, const char*, const char*);

#ifndef soap_read___ns1__Request
#define soap_read___ns1__Request(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Request(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__Request * SOAP_FMAC2 soap_instantiate___ns1__Request(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Request * soap_new___ns1__Request(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Request(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Request * soap_new_req___ns1__Request(struct soap *soap) { struct __ns1__Request *_p = soap_instantiate___ns1__Request(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Request(soap, _p); } return _p; }

inline struct __ns1__Request * soap_new_set___ns1__Request(struct soap *soap, ns2__RequestMessageType *ns2__RequestMessage) { struct __ns1__Request *_p = soap_instantiate___ns1__Request(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Request(soap, _p); _p->ns2__RequestMessage = ns2__RequestMessage; } return _p; }

inline void soap_delete___ns1__Request(struct soap *soap, struct __ns1__Request *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Request(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__PublishEvent
#define SOAP_TYPE___ns1__PublishEvent (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PublishEvent(struct soap*, struct __ns1__PublishEvent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PublishEvent(struct soap*, const struct __ns1__PublishEvent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PublishEvent(struct soap*, const char*, int, const struct __ns1__PublishEvent *, const char*);
SOAP_FMAC3 struct __ns1__PublishEvent * SOAP_FMAC4 soap_in___ns1__PublishEvent(struct soap*, const char*, struct __ns1__PublishEvent *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PublishEvent(struct soap*, const struct __ns1__PublishEvent *, const char*, const char*);

#ifndef soap_write___ns1__PublishEvent
#define soap_write___ns1__PublishEvent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__PublishEvent(soap, data),0) || soap_put___ns1__PublishEvent(soap, data, "-ns1:PublishEvent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__PublishEvent * SOAP_FMAC4 soap_get___ns1__PublishEvent(struct soap*, struct __ns1__PublishEvent *, const char*, const char*);

#ifndef soap_read___ns1__PublishEvent
#define soap_read___ns1__PublishEvent(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__PublishEvent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__PublishEvent * SOAP_FMAC2 soap_instantiate___ns1__PublishEvent(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PublishEvent * soap_new___ns1__PublishEvent(struct soap *soap, int n = -1) { return soap_instantiate___ns1__PublishEvent(soap, n, NULL, NULL, NULL); }

inline struct __ns1__PublishEvent * soap_new_req___ns1__PublishEvent(struct soap *soap) { struct __ns1__PublishEvent *_p = soap_instantiate___ns1__PublishEvent(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__PublishEvent(soap, _p); } return _p; }

inline struct __ns1__PublishEvent * soap_new_set___ns1__PublishEvent(struct soap *soap, ns2__EventMessageType *ns2__EventMessage) { struct __ns1__PublishEvent *_p = soap_instantiate___ns1__PublishEvent(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__PublishEvent(soap, _p); _p->ns2__EventMessage = ns2__EventMessage; } return _p; }

inline void soap_delete___ns1__PublishEvent(struct soap *soap, struct __ns1__PublishEvent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__PublishEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__union_PayloadType
#define SOAP_TYPE__ns2__union_PayloadType (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns2__union_PayloadType(struct soap*, int, const union _ns2__union_PayloadType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__union_PayloadType(struct soap*, int, const union _ns2__union_PayloadType *);
SOAP_FMAC3 union _ns2__union_PayloadType * SOAP_FMAC4 soap_in__ns2__union_PayloadType(struct soap*, int*, union _ns2__union_PayloadType *);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons2__RequestMessageType
#define SOAP_TYPE_PointerTons2__RequestMessageType (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RequestMessageType(struct soap*, ns2__RequestMessageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RequestMessageType(struct soap*, const char *, int, ns2__RequestMessageType *const*, const char *);
SOAP_FMAC3 ns2__RequestMessageType ** SOAP_FMAC4 soap_in_PointerTons2__RequestMessageType(struct soap*, const char*, ns2__RequestMessageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RequestMessageType(struct soap*, ns2__RequestMessageType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RequestMessageType
#define soap_write_PointerTons2__RequestMessageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RequestMessageType(soap, data),0) || soap_put_PointerTons2__RequestMessageType(soap, data, "ns2:RequestMessageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RequestMessageType ** SOAP_FMAC4 soap_get_PointerTons2__RequestMessageType(struct soap*, ns2__RequestMessageType **, const char*, const char*);

#ifndef soap_read_PointerTons2__RequestMessageType
#define soap_read_PointerTons2__RequestMessageType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RequestMessageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ResponseMessageType
#define SOAP_TYPE_PointerTons2__ResponseMessageType (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ResponseMessageType(struct soap*, ns2__ResponseMessageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ResponseMessageType(struct soap*, const char *, int, ns2__ResponseMessageType *const*, const char *);
SOAP_FMAC3 ns2__ResponseMessageType ** SOAP_FMAC4 soap_in_PointerTons2__ResponseMessageType(struct soap*, const char*, ns2__ResponseMessageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ResponseMessageType(struct soap*, ns2__ResponseMessageType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ResponseMessageType
#define soap_write_PointerTons2__ResponseMessageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ResponseMessageType(soap, data),0) || soap_put_PointerTons2__ResponseMessageType(soap, data, "ns2:ResponseMessageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ResponseMessageType ** SOAP_FMAC4 soap_get_PointerTons2__ResponseMessageType(struct soap*, ns2__ResponseMessageType **, const char*, const char*);

#ifndef soap_read_PointerTons2__ResponseMessageType
#define soap_read_PointerTons2__ResponseMessageType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ResponseMessageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EventMessageType
#define SOAP_TYPE_PointerTons2__EventMessageType (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EventMessageType(struct soap*, ns2__EventMessageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EventMessageType(struct soap*, const char *, int, ns2__EventMessageType *const*, const char *);
SOAP_FMAC3 ns2__EventMessageType ** SOAP_FMAC4 soap_in_PointerTons2__EventMessageType(struct soap*, const char*, ns2__EventMessageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EventMessageType(struct soap*, ns2__EventMessageType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EventMessageType
#define soap_write_PointerTons2__EventMessageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EventMessageType(soap, data),0) || soap_put_PointerTons2__EventMessageType(soap, data, "ns2:EventMessageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventMessageType ** SOAP_FMAC4 soap_get_PointerTons2__EventMessageType(struct soap*, ns2__EventMessageType **, const char*, const char*);

#ifndef soap_read_PointerTons2__EventMessageType
#define soap_read_PointerTons2__EventMessageType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EventMessageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__DeviceClassType
#define SOAP_TYPE_PointerTons3__DeviceClassType (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DeviceClassType(struct soap*, ns3__DeviceClassType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DeviceClassType(struct soap*, const char *, int, ns3__DeviceClassType *const*, const char *);
SOAP_FMAC3 ns3__DeviceClassType ** SOAP_FMAC4 soap_in_PointerTons3__DeviceClassType(struct soap*, const char*, ns3__DeviceClassType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DeviceClassType(struct soap*, ns3__DeviceClassType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__DeviceClassType
#define soap_write_PointerTons3__DeviceClassType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__DeviceClassType(soap, data),0) || soap_put_PointerTons3__DeviceClassType(soap, data, "ns3:DeviceClassType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__DeviceClassType ** SOAP_FMAC4 soap_get_PointerTons3__DeviceClassType(struct soap*, ns3__DeviceClassType **, const char*, const char*);

#ifndef soap_read_PointerTons3__DeviceClassType
#define soap_read_PointerTons3__DeviceClassType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__DeviceClassType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NameType
#define SOAP_TYPE_PointerTons2__NameType (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NameType(struct soap*, ns2__NameType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NameType(struct soap*, const char *, int, ns2__NameType *const*, const char *);
SOAP_FMAC3 ns2__NameType ** SOAP_FMAC4 soap_in_PointerTons2__NameType(struct soap*, const char*, ns2__NameType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NameType(struct soap*, ns2__NameType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NameType
#define soap_write_PointerTons2__NameType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NameType(soap, data),0) || soap_put_PointerTons2__NameType(soap, data, "ns2:NameType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NameType ** SOAP_FMAC4 soap_get_PointerTons2__NameType(struct soap*, ns2__NameType **, const char*, const char*);

#ifndef soap_read_PointerTons2__NameType
#define soap_read_PointerTons2__NameType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NameType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NameTypeAuthority
#define SOAP_TYPE_PointerTons2__NameTypeAuthority (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NameTypeAuthority(struct soap*, ns2__NameTypeAuthority *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NameTypeAuthority(struct soap*, const char *, int, ns2__NameTypeAuthority *const*, const char *);
SOAP_FMAC3 ns2__NameTypeAuthority ** SOAP_FMAC4 soap_in_PointerTons2__NameTypeAuthority(struct soap*, const char*, ns2__NameTypeAuthority **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NameTypeAuthority(struct soap*, ns2__NameTypeAuthority *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NameTypeAuthority
#define soap_write_PointerTons2__NameTypeAuthority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NameTypeAuthority(soap, data),0) || soap_put_PointerTons2__NameTypeAuthority(soap, data, "ns2:NameTypeAuthority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NameTypeAuthority ** SOAP_FMAC4 soap_get_PointerTons2__NameTypeAuthority(struct soap*, ns2__NameTypeAuthority **, const char*, const char*);

#ifndef soap_read_PointerTons2__NameTypeAuthority
#define soap_read_PointerTons2__NameTypeAuthority(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NameTypeAuthority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Name
#define SOAP_TYPE_PointerTons2__Name (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Name(struct soap*, ns2__Name *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Name(struct soap*, const char *, int, ns2__Name *const*, const char *);
SOAP_FMAC3 ns2__Name ** SOAP_FMAC4 soap_in_PointerTons2__Name(struct soap*, const char*, ns2__Name **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Name(struct soap*, ns2__Name *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Name
#define soap_write_PointerTons2__Name(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Name(soap, data),0) || soap_put_PointerTons2__Name(soap, data, "ns2:Name", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Name ** SOAP_FMAC4 soap_get_PointerTons2__Name(struct soap*, ns2__Name **, const char*, const char*);

#ifndef soap_read_PointerTons2__Name
#define soap_read_PointerTons2__Name(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Name(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ObjectType
#define SOAP_TYPE_PointerTons2__ObjectType (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ObjectType(struct soap*, ns2__ObjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ObjectType(struct soap*, const char *, int, ns2__ObjectType *const*, const char *);
SOAP_FMAC3 ns2__ObjectType ** SOAP_FMAC4 soap_in_PointerTons2__ObjectType(struct soap*, const char*, ns2__ObjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ObjectType(struct soap*, ns2__ObjectType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ObjectType
#define soap_write_PointerTons2__ObjectType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ObjectType(soap, data),0) || soap_put_PointerTons2__ObjectType(soap, data, "ns2:ObjectType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectType ** SOAP_FMAC4 soap_get_PointerTons2__ObjectType(struct soap*, ns2__ObjectType **, const char*, const char*);

#ifndef soap_read_PointerTons2__ObjectType
#define soap_read_PointerTons2__ObjectType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ObjectType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns2__ErrorType_relatedID
#define SOAP_TYPE_PointerTo_ns2__ErrorType_relatedID (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__ErrorType_relatedID(struct soap*, _ns2__ErrorType_relatedID *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__ErrorType_relatedID(struct soap*, const char *, int, _ns2__ErrorType_relatedID *const*, const char *);
SOAP_FMAC3 _ns2__ErrorType_relatedID ** SOAP_FMAC4 soap_in_PointerTo_ns2__ErrorType_relatedID(struct soap*, const char*, _ns2__ErrorType_relatedID **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__ErrorType_relatedID(struct soap*, _ns2__ErrorType_relatedID *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns2__ErrorType_relatedID
#define soap_write_PointerTo_ns2__ErrorType_relatedID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns2__ErrorType_relatedID(soap, data),0) || soap_put_PointerTo_ns2__ErrorType_relatedID(soap, data, "ns2:ErrorType-relatedID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ErrorType_relatedID ** SOAP_FMAC4 soap_get_PointerTo_ns2__ErrorType_relatedID(struct soap*, _ns2__ErrorType_relatedID **, const char*, const char*);

#ifndef soap_read_PointerTo_ns2__ErrorType_relatedID
#define soap_read_PointerTo_ns2__ErrorType_relatedID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns2__ErrorType_relatedID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns2__ErrorType_ID
#define SOAP_TYPE_PointerTo_ns2__ErrorType_ID (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__ErrorType_ID(struct soap*, _ns2__ErrorType_ID *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__ErrorType_ID(struct soap*, const char *, int, _ns2__ErrorType_ID *const*, const char *);
SOAP_FMAC3 _ns2__ErrorType_ID ** SOAP_FMAC4 soap_in_PointerTo_ns2__ErrorType_ID(struct soap*, const char*, _ns2__ErrorType_ID **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__ErrorType_ID(struct soap*, _ns2__ErrorType_ID *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns2__ErrorType_ID
#define soap_write_PointerTo_ns2__ErrorType_ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns2__ErrorType_ID(soap, data),0) || soap_put_PointerTo_ns2__ErrorType_ID(soap, data, "ns2:ErrorType-ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ErrorType_ID ** SOAP_FMAC4 soap_get_PointerTo_ns2__ErrorType_ID(struct soap*, _ns2__ErrorType_ID **, const char*, const char*);

#ifndef soap_read_PointerTo_ns2__ErrorType_ID
#define soap_read_PointerTo_ns2__ErrorType_ID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns2__ErrorType_ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__LocationType
#define SOAP_TYPE_PointerTons2__LocationType (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__LocationType(struct soap*, ns2__LocationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__LocationType(struct soap*, const char *, int, ns2__LocationType *const*, const char *);
SOAP_FMAC3 ns2__LocationType ** SOAP_FMAC4 soap_in_PointerTons2__LocationType(struct soap*, const char*, ns2__LocationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__LocationType(struct soap*, ns2__LocationType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__LocationType
#define soap_write_PointerTons2__LocationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__LocationType(soap, data),0) || soap_put_PointerTons2__LocationType(soap, data, "ns2:LocationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__LocationType ** SOAP_FMAC4 soap_get_PointerTons2__LocationType(struct soap*, ns2__LocationType **, const char*, const char*);

#ifndef soap_read_PointerTons2__LocationType
#define soap_read_PointerTons2__LocationType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__LocationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__QName
#define SOAP_TYPE_PointerToxsd__QName (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__QName
#define soap_write_PointerToxsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__QName(soap, data),0) || soap_put_PointerToxsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__QName
#define soap_read_PointerToxsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns2__ErrorType_level
#define SOAP_TYPE_PointerTo_ns2__ErrorType_level (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__ErrorType_level(struct soap*, enum _ns2__ErrorType_level *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__ErrorType_level(struct soap*, const char *, int, enum _ns2__ErrorType_level *const*, const char *);
SOAP_FMAC3 enum _ns2__ErrorType_level ** SOAP_FMAC4 soap_in_PointerTo_ns2__ErrorType_level(struct soap*, const char*, enum _ns2__ErrorType_level **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__ErrorType_level(struct soap*, enum _ns2__ErrorType_level *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns2__ErrorType_level
#define soap_write_PointerTo_ns2__ErrorType_level(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns2__ErrorType_level(soap, data),0) || soap_put_PointerTo_ns2__ErrorType_level(soap, data, "ns2:ErrorType-level", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns2__ErrorType_level ** SOAP_FMAC4 soap_get_PointerTo_ns2__ErrorType_level(struct soap*, enum _ns2__ErrorType_level **, const char*, const char*);

#ifndef soap_read_PointerTo_ns2__ErrorType_level
#define soap_read_PointerTo_ns2__ErrorType_level(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns2__ErrorType_level(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PayloadType
#define SOAP_TYPE_PointerTons2__PayloadType (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PayloadType(struct soap*, ns2__PayloadType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PayloadType(struct soap*, const char *, int, ns2__PayloadType *const*, const char *);
SOAP_FMAC3 ns2__PayloadType ** SOAP_FMAC4 soap_in_PointerTons2__PayloadType(struct soap*, const char*, ns2__PayloadType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PayloadType(struct soap*, ns2__PayloadType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PayloadType
#define soap_write_PointerTons2__PayloadType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PayloadType(soap, data),0) || soap_put_PointerTons2__PayloadType(soap, data, "ns2:PayloadType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PayloadType ** SOAP_FMAC4 soap_get_PointerTons2__PayloadType(struct soap*, ns2__PayloadType **, const char*, const char*);

#ifndef soap_read_PointerTons2__PayloadType
#define soap_read_PointerTons2__PayloadType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PayloadType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReplyType
#define SOAP_TYPE_PointerTons2__ReplyType (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReplyType(struct soap*, ns2__ReplyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReplyType(struct soap*, const char *, int, ns2__ReplyType *const*, const char *);
SOAP_FMAC3 ns2__ReplyType ** SOAP_FMAC4 soap_in_PointerTons2__ReplyType(struct soap*, const char*, ns2__ReplyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReplyType(struct soap*, ns2__ReplyType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReplyType
#define soap_write_PointerTons2__ReplyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ReplyType(soap, data),0) || soap_put_PointerTons2__ReplyType(soap, data, "ns2:ReplyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReplyType ** SOAP_FMAC4 soap_get_PointerTons2__ReplyType(struct soap*, ns2__ReplyType **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReplyType
#define soap_read_PointerTons2__ReplyType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReplyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RequestType
#define SOAP_TYPE_PointerTons2__RequestType (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RequestType(struct soap*, ns2__RequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RequestType(struct soap*, const char *, int, ns2__RequestType *const*, const char *);
SOAP_FMAC3 ns2__RequestType ** SOAP_FMAC4 soap_in_PointerTons2__RequestType(struct soap*, const char*, ns2__RequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RequestType(struct soap*, ns2__RequestType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RequestType
#define soap_write_PointerTons2__RequestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RequestType(soap, data),0) || soap_put_PointerTons2__RequestType(soap, data, "ns2:RequestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RequestType ** SOAP_FMAC4 soap_get_PointerTons2__RequestType(struct soap*, ns2__RequestType **, const char*, const char*);

#ifndef soap_read_PointerTons2__RequestType
#define soap_read_PointerTons2__RequestType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RequestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__HeaderType
#define SOAP_TYPE_PointerTons2__HeaderType (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__HeaderType(struct soap*, ns2__HeaderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__HeaderType(struct soap*, const char *, int, ns2__HeaderType *const*, const char *);
SOAP_FMAC3 ns2__HeaderType ** SOAP_FMAC4 soap_in_PointerTons2__HeaderType(struct soap*, const char*, ns2__HeaderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__HeaderType(struct soap*, ns2__HeaderType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__HeaderType
#define soap_write_PointerTons2__HeaderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__HeaderType(soap, data),0) || soap_put_PointerTons2__HeaderType(soap, data, "ns2:HeaderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__HeaderType ** SOAP_FMAC4 soap_get_PointerTons2__HeaderType(struct soap*, ns2__HeaderType **, const char*, const char*);

#ifndef soap_read_PointerTons2__HeaderType
#define soap_read_PointerTons2__HeaderType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__HeaderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MessageProperty
#define SOAP_TYPE_PointerTons2__MessageProperty (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MessageProperty(struct soap*, ns2__MessageProperty *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MessageProperty(struct soap*, const char *, int, ns2__MessageProperty *const*, const char *);
SOAP_FMAC3 ns2__MessageProperty ** SOAP_FMAC4 soap_in_PointerTons2__MessageProperty(struct soap*, const char*, ns2__MessageProperty **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MessageProperty(struct soap*, ns2__MessageProperty *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MessageProperty
#define soap_write_PointerTons2__MessageProperty(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MessageProperty(soap, data),0) || soap_put_PointerTons2__MessageProperty(soap, data, "ns2:MessageProperty", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MessageProperty ** SOAP_FMAC4 soap_get_PointerTons2__MessageProperty(struct soap*, ns2__MessageProperty **, const char*, const char*);

#ifndef soap_read_PointerTons2__MessageProperty
#define soap_read_PointerTons2__MessageProperty(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MessageProperty(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__UserType
#define SOAP_TYPE_PointerTons2__UserType (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__UserType(struct soap*, ns2__UserType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__UserType(struct soap*, const char *, int, ns2__UserType *const*, const char *);
SOAP_FMAC3 ns2__UserType ** SOAP_FMAC4 soap_in_PointerTons2__UserType(struct soap*, const char*, ns2__UserType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__UserType(struct soap*, ns2__UserType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__UserType
#define soap_write_PointerTons2__UserType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__UserType(soap, data),0) || soap_put_PointerTons2__UserType(soap, data, "ns2:UserType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__UserType ** SOAP_FMAC4 soap_get_PointerTons2__UserType(struct soap*, ns2__UserType **, const char*, const char*);

#ifndef soap_read_PointerTons2__UserType
#define soap_read_PointerTons2__UserType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__UserType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReplayDetectionType
#define SOAP_TYPE_PointerTons2__ReplayDetectionType (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReplayDetectionType(struct soap*, ns2__ReplayDetectionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReplayDetectionType(struct soap*, const char *, int, ns2__ReplayDetectionType *const*, const char *);
SOAP_FMAC3 ns2__ReplayDetectionType ** SOAP_FMAC4 soap_in_PointerTons2__ReplayDetectionType(struct soap*, const char*, ns2__ReplayDetectionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReplayDetectionType(struct soap*, ns2__ReplayDetectionType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReplayDetectionType
#define soap_write_PointerTons2__ReplayDetectionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ReplayDetectionType(soap, data),0) || soap_put_PointerTons2__ReplayDetectionType(soap, data, "ns2:ReplayDetectionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReplayDetectionType ** SOAP_FMAC4 soap_get_PointerTons2__ReplayDetectionType(struct soap*, ns2__ReplayDetectionType **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReplayDetectionType
#define soap_read_PointerTons2__ReplayDetectionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReplayDetectionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OperationType
#define SOAP_TYPE_PointerTons2__OperationType (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OperationType(struct soap*, ns2__OperationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OperationType(struct soap*, const char *, int, ns2__OperationType *const*, const char *);
SOAP_FMAC3 ns2__OperationType ** SOAP_FMAC4 soap_in_PointerTons2__OperationType(struct soap*, const char*, ns2__OperationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OperationType(struct soap*, ns2__OperationType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OperationType
#define soap_write_PointerTons2__OperationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OperationType(soap, data),0) || soap_put_PointerTons2__OperationType(soap, data, "ns2:OperationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OperationType ** SOAP_FMAC4 soap_get_PointerTons2__OperationType(struct soap*, ns2__OperationType **, const char*, const char*);

#ifndef soap_read_PointerTons2__OperationType
#define soap_read_PointerTons2__OperationType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OperationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobool(soap, data),0) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, std::vector<_ns2__PayloadType_ID >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, const char *, int, std::vector<_ns2__PayloadType_ID >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__PayloadType_ID >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, const char*, std::vector<_ns2__PayloadType_ID >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, std::vector<_ns2__PayloadType_ID >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID
#define soap_write_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(soap, data),0) || soap_put_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__PayloadType_ID >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, std::vector<_ns2__PayloadType_ID >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID
#define soap_read_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__PayloadType_ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OperationSet
#define SOAP_TYPE_PointerTons2__OperationSet (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OperationSet(struct soap*, ns2__OperationSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OperationSet(struct soap*, const char *, int, ns2__OperationSet *const*, const char *);
SOAP_FMAC3 ns2__OperationSet ** SOAP_FMAC4 soap_in_PointerTons2__OperationSet(struct soap*, const char*, ns2__OperationSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OperationSet(struct soap*, ns2__OperationSet *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OperationSet
#define soap_write_PointerTons2__OperationSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OperationSet(soap, data),0) || soap_put_PointerTons2__OperationSet(soap, data, "ns2:OperationSet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OperationSet ** SOAP_FMAC4 soap_get_PointerTons2__OperationSet(struct soap*, ns2__OperationSet **, const char*, const char*);

#ifndef soap_read_PointerTons2__OperationSet
#define soap_read_PointerTons2__OperationSet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OperationSet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, std::vector<ns3__ArrayValuesType * >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, const char *, int, std::vector<ns3__ArrayValuesType * >*const*, const char *);
SOAP_FMAC3 std::vector<ns3__ArrayValuesType * >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, const char*, std::vector<ns3__ArrayValuesType * >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, std::vector<ns3__ArrayValuesType * >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType
#define soap_write_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(soap, data),0) || soap_put_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<ns3__ArrayValuesType * >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, std::vector<ns3__ArrayValuesType * >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType
#define soap_read_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfPointerTons3__ArrayValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__ArrayValuesType
#define SOAP_TYPE_PointerTons3__ArrayValuesType (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayValuesType(struct soap*, ns3__ArrayValuesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayValuesType(struct soap*, const char *, int, ns3__ArrayValuesType *const*, const char *);
SOAP_FMAC3 ns3__ArrayValuesType ** SOAP_FMAC4 soap_in_PointerTons3__ArrayValuesType(struct soap*, const char*, ns3__ArrayValuesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayValuesType(struct soap*, ns3__ArrayValuesType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__ArrayValuesType
#define soap_write_PointerTons3__ArrayValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__ArrayValuesType(soap, data),0) || soap_put_PointerTons3__ArrayValuesType(soap, data, "ns3:ArrayValuesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ArrayValuesType ** SOAP_FMAC4 soap_get_PointerTons3__ArrayValuesType(struct soap*, ns3__ArrayValuesType **, const char*, const char*);

#ifndef soap_read_PointerTons3__ArrayValuesType
#define soap_read_PointerTons3__ArrayValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__ArrayValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, std::vector<ns3__DeviceValuesType * >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, const char *, int, std::vector<ns3__DeviceValuesType * >*const*, const char *);
SOAP_FMAC3 std::vector<ns3__DeviceValuesType * >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, const char*, std::vector<ns3__DeviceValuesType * >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, std::vector<ns3__DeviceValuesType * >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType
#define soap_write_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(soap, data),0) || soap_put_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<ns3__DeviceValuesType * >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, std::vector<ns3__DeviceValuesType * >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType
#define soap_read_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfPointerTons3__DeviceValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__DeviceValuesType
#define SOAP_TYPE_PointerTons3__DeviceValuesType (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DeviceValuesType(struct soap*, ns3__DeviceValuesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DeviceValuesType(struct soap*, const char *, int, ns3__DeviceValuesType *const*, const char *);
SOAP_FMAC3 ns3__DeviceValuesType ** SOAP_FMAC4 soap_in_PointerTons3__DeviceValuesType(struct soap*, const char*, ns3__DeviceValuesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DeviceValuesType(struct soap*, ns3__DeviceValuesType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__DeviceValuesType
#define soap_write_PointerTons3__DeviceValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__DeviceValuesType(soap, data),0) || soap_put_PointerTons3__DeviceValuesType(soap, data, "ns3:DeviceValuesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__DeviceValuesType ** SOAP_FMAC4 soap_get_PointerTons3__DeviceValuesType(struct soap*, ns3__DeviceValuesType **, const char*, const char*);

#ifndef soap_read_PointerTons3__DeviceValuesType
#define soap_read_PointerTons3__DeviceValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__DeviceValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, std::vector<ns3__CommonValuesType * >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, const char *, int, std::vector<ns3__CommonValuesType * >*const*, const char *);
SOAP_FMAC3 std::vector<ns3__CommonValuesType * >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, const char*, std::vector<ns3__CommonValuesType * >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, std::vector<ns3__CommonValuesType * >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType
#define soap_write_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(soap, data),0) || soap_put_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<ns3__CommonValuesType * >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, std::vector<ns3__CommonValuesType * >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType
#define soap_read_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfPointerTons3__CommonValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__CommonValuesType
#define SOAP_TYPE_PointerTons3__CommonValuesType (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CommonValuesType(struct soap*, ns3__CommonValuesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CommonValuesType(struct soap*, const char *, int, ns3__CommonValuesType *const*, const char *);
SOAP_FMAC3 ns3__CommonValuesType ** SOAP_FMAC4 soap_in_PointerTons3__CommonValuesType(struct soap*, const char*, ns3__CommonValuesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CommonValuesType(struct soap*, ns3__CommonValuesType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__CommonValuesType
#define soap_write_PointerTons3__CommonValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__CommonValuesType(soap, data),0) || soap_put_PointerTons3__CommonValuesType(soap, data, "ns3:CommonValuesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__CommonValuesType ** SOAP_FMAC4 soap_get_PointerTons3__CommonValuesType(struct soap*, ns3__CommonValuesType **, const char*, const char*);

#ifndef soap_read_PointerTons3__CommonValuesType
#define soap_read_PointerTons3__CommonValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__CommonValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__integer
#define SOAP_TYPE_PointerToxsd__integer (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__integer
#define soap_write_PointerToxsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__integer(soap, data),0) || soap_put_PointerToxsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__integer
#define soap_read_PointerToxsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, std::vector<_ns2__ReplyType_ID >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, const char *, int, std::vector<_ns2__ReplyType_ID >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__ReplyType_ID >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, const char*, std::vector<_ns2__ReplyType_ID >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, std::vector<_ns2__ReplyType_ID >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID
#define soap_write_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(soap, data),0) || soap_put_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__ReplyType_ID >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, std::vector<_ns2__ReplyType_ID >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID
#define soap_read_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__ReplyType_ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ErrorType
#define SOAP_TYPE_PointerTons2__ErrorType (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ErrorType(struct soap*, ns2__ErrorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ErrorType(struct soap*, const char *, int, ns2__ErrorType *const*, const char *);
SOAP_FMAC3 ns2__ErrorType ** SOAP_FMAC4 soap_in_PointerTons2__ErrorType(struct soap*, const char*, ns2__ErrorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ErrorType(struct soap*, ns2__ErrorType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ErrorType
#define soap_write_PointerTons2__ErrorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ErrorType(soap, data),0) || soap_put_PointerTons2__ErrorType(soap, data, "ns2:ErrorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ErrorType ** SOAP_FMAC4 soap_get_PointerTons2__ErrorType(struct soap*, ns2__ErrorType **, const char*, const char*);

#ifndef soap_read_PointerTons2__ErrorType
#define soap_read_PointerTons2__ErrorType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ErrorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__RequestType_ID
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__RequestType_ID (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(struct soap*, std::vector<_ns2__RequestType_ID >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(struct soap*, const char *, int, std::vector<_ns2__RequestType_ID >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__RequestType_ID >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(struct soap*, const char*, std::vector<_ns2__RequestType_ID >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(struct soap*, std::vector<_ns2__RequestType_ID >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__RequestType_ID
#define soap_write_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(soap, data),0) || soap_put_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__RequestType_ID >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(struct soap*, std::vector<_ns2__RequestType_ID >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__RequestType_ID
#define soap_read_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__RequestType_ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IDKindType
#define SOAP_TYPE_PointerTons2__IDKindType (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IDKindType(struct soap*, enum ns2__IDKindType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IDKindType(struct soap*, const char *, int, enum ns2__IDKindType *const*, const char *);
SOAP_FMAC3 enum ns2__IDKindType ** SOAP_FMAC4 soap_in_PointerTons2__IDKindType(struct soap*, const char*, enum ns2__IDKindType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IDKindType(struct soap*, enum ns2__IDKindType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IDKindType
#define soap_write_PointerTons2__IDKindType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IDKindType(soap, data),0) || soap_put_PointerTons2__IDKindType(soap, data, "ns2:IDKindType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IDKindType ** SOAP_FMAC4 soap_get_PointerTons2__IDKindType(struct soap*, enum ns2__IDKindType **, const char*, const char*);

#ifndef soap_read_PointerTons2__IDKindType
#define soap_read_PointerTons2__IDKindType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IDKindType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data),0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OptionType
#define SOAP_TYPE_PointerTons2__OptionType (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OptionType(struct soap*, ns2__OptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OptionType(struct soap*, const char *, int, ns2__OptionType *const*, const char *);
SOAP_FMAC3 ns2__OptionType ** SOAP_FMAC4 soap_in_PointerTons2__OptionType(struct soap*, const char*, ns2__OptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OptionType(struct soap*, ns2__OptionType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OptionType
#define soap_write_PointerTons2__OptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OptionType(soap, data),0) || soap_put_PointerTons2__OptionType(soap, data, "ns2:OptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OptionType ** SOAP_FMAC4 soap_get_PointerTons2__OptionType(struct soap*, ns2__OptionType **, const char*, const char*);

#ifndef soap_read_PointerTons2__OptionType
#define soap_read_PointerTons2__OptionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OptionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTotime
#define SOAP_TYPE_PointerTotime (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTotime(soap, data),0) || soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__DeviceClassType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__DeviceClassType (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__DeviceClassType(struct soap*, std::vector<ns3__DeviceClassType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__DeviceClassType(struct soap*, const std::vector<ns3__DeviceClassType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__DeviceClassType(struct soap*, const char*, int, const std::vector<ns3__DeviceClassType * >*, const char*);
SOAP_FMAC3 std::vector<ns3__DeviceClassType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__DeviceClassType(struct soap*, const char*, std::vector<ns3__DeviceClassType * >*, const char*);
SOAP_FMAC1 std::vector<ns3__DeviceClassType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__DeviceClassType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__DeviceClassType * > * soap_new_std__vectorTemplateOfPointerTons3__DeviceClassType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__DeviceClassType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__DeviceClassType(struct soap *soap, std::vector<ns3__DeviceClassType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__DeviceClassType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Name
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Name (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Name(struct soap*, std::vector<ns2__Name * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Name(struct soap*, const std::vector<ns2__Name * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Name(struct soap*, const char*, int, const std::vector<ns2__Name * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Name * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Name(struct soap*, const char*, std::vector<ns2__Name * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Name * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Name(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Name * > * soap_new_std__vectorTemplateOfPointerTons2__Name(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Name(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Name(struct soap *soap, std::vector<ns2__Name * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Name(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__MessageProperty
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__MessageProperty (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__MessageProperty(struct soap*, std::vector<ns2__MessageProperty * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__MessageProperty(struct soap*, const std::vector<ns2__MessageProperty * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__MessageProperty(struct soap*, const char*, int, const std::vector<ns2__MessageProperty * >*, const char*);
SOAP_FMAC3 std::vector<ns2__MessageProperty * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__MessageProperty(struct soap*, const char*, std::vector<ns2__MessageProperty * >*, const char*);
SOAP_FMAC1 std::vector<ns2__MessageProperty * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__MessageProperty(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__MessageProperty * > * soap_new_std__vectorTemplateOfPointerTons2__MessageProperty(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__MessageProperty(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__MessageProperty(struct soap *soap, std::vector<ns2__MessageProperty * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__MessageProperty(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__OperationType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__OperationType (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__OperationType(struct soap*, std::vector<ns2__OperationType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__OperationType(struct soap*, const std::vector<ns2__OperationType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__OperationType(struct soap*, const char*, int, const std::vector<ns2__OperationType * >*, const char*);
SOAP_FMAC3 std::vector<ns2__OperationType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__OperationType(struct soap*, const char*, std::vector<ns2__OperationType * >*, const char*);
SOAP_FMAC1 std::vector<ns2__OperationType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__OperationType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__OperationType * > * soap_new_std__vectorTemplateOfPointerTons2__OperationType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__OperationType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__OperationType(struct soap *soap, std::vector<ns2__OperationType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__OperationType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__PayloadType_ID
#define SOAP_TYPE_std__vectorTemplateOf_ns2__PayloadType_ID (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, std::vector<_ns2__PayloadType_ID >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, const std::vector<_ns2__PayloadType_ID >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, const char*, int, const std::vector<_ns2__PayloadType_ID >*, const char*);
SOAP_FMAC3 std::vector<_ns2__PayloadType_ID >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, const char*, std::vector<_ns2__PayloadType_ID >*, const char*);
SOAP_FMAC1 std::vector<_ns2__PayloadType_ID > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__PayloadType_ID > * soap_new_std__vectorTemplateOf_ns2__PayloadType_ID(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__PayloadType_ID(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__PayloadType_ID(struct soap *soap, std::vector<_ns2__PayloadType_ID >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__PayloadType_ID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ArrayValuesType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ArrayValuesType (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, std::vector<ns3__ArrayValuesType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, const std::vector<ns3__ArrayValuesType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, const char*, int, const std::vector<ns3__ArrayValuesType * >*, const char*);
SOAP_FMAC3 std::vector<ns3__ArrayValuesType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, const char*, std::vector<ns3__ArrayValuesType * >*, const char*);
SOAP_FMAC1 std::vector<ns3__ArrayValuesType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ArrayValuesType * > * soap_new_std__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__ArrayValuesType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap *soap, std::vector<ns3__ArrayValuesType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__ArrayValuesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__DeviceValuesType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__DeviceValuesType (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, std::vector<ns3__DeviceValuesType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, const std::vector<ns3__DeviceValuesType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, const char*, int, const std::vector<ns3__DeviceValuesType * >*, const char*);
SOAP_FMAC3 std::vector<ns3__DeviceValuesType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, const char*, std::vector<ns3__DeviceValuesType * >*, const char*);
SOAP_FMAC1 std::vector<ns3__DeviceValuesType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__DeviceValuesType * > * soap_new_std__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__DeviceValuesType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap *soap, std::vector<ns3__DeviceValuesType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__DeviceValuesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__CommonValuesType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__CommonValuesType (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, std::vector<ns3__CommonValuesType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, const std::vector<ns3__CommonValuesType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, const char*, int, const std::vector<ns3__CommonValuesType * >*, const char*);
SOAP_FMAC3 std::vector<ns3__CommonValuesType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, const char*, std::vector<ns3__CommonValuesType * >*, const char*);
SOAP_FMAC1 std::vector<ns3__CommonValuesType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__CommonValuesType * > * soap_new_std__vectorTemplateOfPointerTons3__CommonValuesType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__CommonValuesType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__CommonValuesType(struct soap *soap, std::vector<ns3__CommonValuesType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__CommonValuesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__ReplyType_ID
#define SOAP_TYPE_std__vectorTemplateOf_ns2__ReplyType_ID (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, std::vector<_ns2__ReplyType_ID >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, const std::vector<_ns2__ReplyType_ID >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, const char*, int, const std::vector<_ns2__ReplyType_ID >*, const char*);
SOAP_FMAC3 std::vector<_ns2__ReplyType_ID >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, const char*, std::vector<_ns2__ReplyType_ID >*, const char*);
SOAP_FMAC1 std::vector<_ns2__ReplyType_ID > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__ReplyType_ID > * soap_new_std__vectorTemplateOf_ns2__ReplyType_ID(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__ReplyType_ID(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__ReplyType_ID(struct soap *soap, std::vector<_ns2__ReplyType_ID >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__ReplyType_ID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__ErrorType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__ErrorType (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__ErrorType(struct soap*, std::vector<ns2__ErrorType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__ErrorType(struct soap*, const std::vector<ns2__ErrorType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__ErrorType(struct soap*, const char*, int, const std::vector<ns2__ErrorType * >*, const char*);
SOAP_FMAC3 std::vector<ns2__ErrorType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__ErrorType(struct soap*, const char*, std::vector<ns2__ErrorType * >*, const char*);
SOAP_FMAC1 std::vector<ns2__ErrorType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__ErrorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__ErrorType * > * soap_new_std__vectorTemplateOfPointerTons2__ErrorType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__ErrorType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__ErrorType(struct soap *soap, std::vector<ns2__ErrorType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__ErrorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char * >*, const char*);
SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char * >*, const char*);
SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char * > * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__RequestType_ID
#define SOAP_TYPE_std__vectorTemplateOf_ns2__RequestType_ID (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__RequestType_ID(struct soap*, std::vector<_ns2__RequestType_ID >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__RequestType_ID(struct soap*, const std::vector<_ns2__RequestType_ID >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__RequestType_ID(struct soap*, const char*, int, const std::vector<_ns2__RequestType_ID >*, const char*);
SOAP_FMAC3 std::vector<_ns2__RequestType_ID >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__RequestType_ID(struct soap*, const char*, std::vector<_ns2__RequestType_ID >*, const char*);
SOAP_FMAC1 std::vector<_ns2__RequestType_ID > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__RequestType_ID(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__RequestType_ID > * soap_new_std__vectorTemplateOf_ns2__RequestType_ID(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__RequestType_ID(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__RequestType_ID(struct soap *soap, std::vector<_ns2__RequestType_ID >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__RequestType_ID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__OptionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__OptionType (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__OptionType(struct soap*, std::vector<ns2__OptionType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__OptionType(struct soap*, const std::vector<ns2__OptionType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__OptionType(struct soap*, const char*, int, const std::vector<ns2__OptionType * >*, const char*);
SOAP_FMAC3 std::vector<ns2__OptionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__OptionType(struct soap*, const char*, std::vector<ns2__OptionType * >*, const char*);
SOAP_FMAC1 std::vector<ns2__OptionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__OptionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__OptionType * > * soap_new_std__vectorTemplateOfPointerTons2__OptionType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__OptionType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__OptionType(struct soap *soap, std::vector<ns2__OptionType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__OptionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
